import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict

# ==================== DATA ANALYSIS SCRIPT ====================

def analyze_and_plot(data, column_name, labels, title):
    """Helper function to analyze and plot categorical data"""
    df = pd.DataFrame(data, columns=[column_name])
    df[column_name] = df[column_name].map(labels)
    
    counts = df[column_name].value_counts()
    percentages = (df[column_name].value_counts(normalize=True) * 100).round(1)
    
    # Create summary DataFrame
    summary = pd.DataFrame({
        'Count': counts,
        'Percentage': percentages
    }).sort_index()
    
    # Plotting
    plt.figure(figsize=(10, 5))
    bars = plt.bar(summary.index, summary['Count'], color='skyblue')
    plt.title(f'{title} Distribution')
    plt.xlabel(title)
    plt.ylabel('Count')
    
    # Add percentage labels
    for bar in bars:
        height = bar.get_height()
        percentage = summary.loc[bar.get_label(), 'Percentage']
        plt.text(bar.get_x() + bar.get_width()/2, height, 
                f'{height}\n({percentage}%)', 
                ha='center', va='bottom')
    
    plt.xticks(rotation=45 if len(summary) > 2 else 0)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.show()
    
    return summary

# ==================== AGE DISTRIBUTION ====================
print("\n" + "="*40 + " AGE ANALYSIS " + "="*40)
ages = [
    50, 55, 76, 57, 53, 93, 50, 29, 31, 52, 50, 80, 37, 55, 40, 56, 
    46, 42, 40, 48, 25, 45, 35, 50, 31, 45, 51, 40, 36, 55, 30, 40, 
    40, 44, 44, 28, 48, 40, 39, 38, 55, 36, 55, 60, 30, 40, 48, 35, 
    38, 35, 50, 39, 40, 32, 46, 57, 32, 50, 48, 45, 53, 54, 56, 50, 
    43, 45
]

age_df = pd.DataFrame(ages, columns=['Age'])
bins = [20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90+']
age_df['Age_Group'] = pd.cut(age_df['Age'], bins=bins, labels=labels, right=False)

age_counts = age_df['Age_Group'].value_counts().sort_index()
age_percent = (age_df['Age_Group'].value_counts(normalize=True) * 100

age_summary = pd.DataFrame({
    'Age Group': age_counts.index,
    'Count': age_counts.values,
    'Percentage': age_percent.round(1).values
})

print("\nAge Distribution Summary:")
print(age_summary.to_string(index=False))

# ==================== GENDER DISTRIBUTION ====================
print("\n" + "="*40 + " GENDER ANALYSIS " + "="*40)
gender_data = [
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,
    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 0, 1, 1, 1, 1
]
gender_labels = {0: 'Male', 1: 'Female'}
gender_summary = analyze_and_plot(gender_data, 'Gender', gender_labels, 'Gender')

# ==================== CASTE DISTRIBUTION ====================
print("\n" + "="*40 + " CASTE ANALYSIS " + "="*40)
caste_data = [
    0,3,1,1,0,1,0,3,0,1,0,1,0,3,3,0,0,0,0,3,3,3,3,1,1,0,3,1,3,1,1,1,
    0,1,0,0,3,3,3,3,0,3,1,1,3,3,3,2,0,0,0,1,0,0,0,0,1,2,1,1,0,1,1,1,0,0
]
caste_labels = {0: "General", 1: "SC", 2: "ST", 3: "OBC"}
caste_summary = analyze_and_plot(caste_data, 'Caste', caste_labels, 'Caste')

# ==================== MARITAL STATUS ====================
print("\n" + "="*40 + " MARITAL STATUS ANALYSIS " + "="*40)
marital_data = [
    1,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1
]
marital_labels = {0: 'Single', 1: 'Married', 2: 'Divorced', 3: 'Widowed'}
marital_summary = analyze_and_plot(marital_data, 'Marital Status', marital_labels, 'Marital Status')

# ==================== FAMILY TYPE ====================
print("\n" + "="*40 + " FAMILY TYPE ANALYSIS " + "="*40)
family_data = [
    1,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,
    1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1
]
family_labels = {0: 'Joint Family', 1: 'Nuclear Family'}
family_summary = analyze_and_plot(family_data, 'Family Type', family_labels, 'Family Type')

# ==================== PRIMARY LANGUAGE ====================
print("\n" + "="*40 + " LANGUAGE ANALYSIS " + "="*40)
language_data = [
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
]
language_labels = {0: 'Hindi', 1: 'English', 2: 'Assamese', 3: 'Others (Bengali)'}
language_summary = analyze_and_plot(language_data, 'Language', language_labels, 'Primary Language')

# ==================== AMENITIES ANALYSIS ====================
print("\n" + "="*40 + " AMENITIES ANALYSIS " + "="*40)
amenities_data = [
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3],
    [0,1,3], [0,1,2], [0,1,2], [0,1,2], [0,1,2,3],
    [0,1], [0,1,2,3], [0,1,3], [0], [0,1,2,3],
    [0,1,2,3], [0], [0,1,3], [0,1,2], [0,2],
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,3],
    [0,3], [0,3], [0,1], [0,1,2], [0,1,2,3],
    [0], [0], [0], [1], [1], [1]
]

amenities_map = {0: 'Electricity', 1: 'Clean Water', 2: 'Sanitation', 3: 'Internet'}
amenities_df = pd.DataFrame(columns=amenities_map.values())

for household in amenities_data:
    row = {amenities_map[code]: 1 for code in household}
    amenities_df = amenities_df.append(row, ignore_index=True)

amenities_df = amenities_df.fillna(0)
availability = amenities_df.sum().sort_values(ascending=False)
percentage = (availability / len(amenities_df) * 100

amenities_summary = pd.DataFrame({
    'Amenity': availability.index,
    'Households': availability.values,
    'Percentage': percentage.round(1).values
})

print("\nAmenities Availability Summary:")
print(amenities_summary.to_string(index=False))

plt.figure(figsize=(10, 5))
bars = plt.bar(amenities_summary['Amenity'], amenities_summary['Percentage'], 
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
plt.title('Household Amenities Availability (%)')
plt.ylabel('Percentage of Households')
plt.ylim(0, 100)

for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height, f'{height:.1f}%', 
             ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.tight_layout()
plt.show()

plt.style.use('seaborn')
plt.rcParams['figure.facecolor'] = 'white'

# ==================== HOUSE TYPE ANALYSIS ====================
house_type = [
    0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
    1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 0
]

house_df = pd.DataFrame(house_type, columns=['HouseType'])
house_df['HouseType'] = house_df['HouseType'].map({0: 'Pakka', 1: 'Kacha'})
house_counts = house_df['HouseType'].value_counts()
house_perc = (house_df['HouseType'].value_counts(normalize=True) * 100

plt.figure(figsize=(8, 5))
bars = plt.bar(house_counts.index, house_counts.values, color=['#4e79a7', '#f28e2b'])
plt.title('House Type Distribution', fontsize=14)
plt.xlabel('Type of House', fontsize=12)
plt.ylabel('Number of Households', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = house_perc[bar.get_label()]
    plt.text(bar.get_x() + bar.get_width()/2, height, 
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

# ==================== AMENITIES ANALYSIS ====================
amenities_data = [
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3],
    [0,1,3], [0,1,2], [0,1,2], [0,1,2], [0,1,2,3],
    [0,1], [0,1,2,3], [0,1,3], [0], [0,1,2,3],
    [0,1,2,3], [0], [0,1,3], [0,1,2], [0,2],
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,3],
    [0,3], [0,3], [0,1], [0,1,2], [0,1,2,3],
    [0], [0], [0], [1], [1], [1]
]

amenities_df = pd.DataFrame(columns=['Electricity', 'Clean Water', 'Sanitation Facility', 'Internet Access'])
for household in amenities_data:
    row = {
        'Electricity': 1 if 0 in household else 0,
        'Clean Water': 1 if 1 in household else 0,
        'Sanitation Facility': 1 if 2 in household else 0,
        'Internet Access': 1 if 3 in household else 0
    }
    amenities_df = amenities_df.append(row, ignore_index=True)

amenities_summary = amenities_df.sum().sort_values(ascending=False)
amenities_perc = (amenities_summary / len(amenities_df) * 100

plt.figure(figsize=(10, 5))
bars = plt.bar(amenities_summary.index, amenities_perc.values,
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
plt.title('Household Amenities Availability', fontsize=14)
plt.xlabel('Amenity Type', fontsize=12)
plt.ylabel('Percentage of Households (%)', fontsize=12)
plt.ylim(0, 100)

for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
             f'{bar.get_height():.1f}%', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ==================== OCCUPATION ANALYSIS ====================
occupation_data = [
    3, [1,3], 1, 1, 1, [1,3], 3, 1, 1, 1,
    1, 3, 1, 1, 1, 1, 1, "5(Service)", "5(Service)", 3,
    1, 5, 1, 1, 5, 5, 3, 1, 1, "5(Service)",
    1, 1, 1, 1, 1, "5(Service)", 1, 1, 3, 3,
    3, 3, 3, 1, 3, 1, 1, 1, 1, "5(Service)",
    "5(Service)", 1, "5(Service)", 3, 1, "5(Service)", 3, 1, 1,
    3, 1, 1, 3, 1, 1, 1
]

occupation_counts = defaultdict(int)
for entry in occupation_data:
    if isinstance(entry, list):
        codes = entry
    else:
        codes = [5 if isinstance(entry, str) else entry]
    for code in codes:
        occupation_counts[code] += 1

occupation_labels = {
    0: 'Unemployed', 1: 'Self-Employed', 2: 'Farmer',
    3: 'Small Business Owner', 4: 'Government Employee', 5: 'Other'
}

occupation_summary = pd.DataFrame([
    {'Occupation': occupation_labels[code], 'Count': count, 
     'Percentage': (count/len(occupation_data))*100}
    for code, count in occupation_counts.items()
]).sort_values('Count', ascending=False)

plt.figure(figsize=(10, 5))
bars = plt.bar(occupation_summary['Occupation'], occupation_summary['Count'],
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])
plt.title('Occupation Distribution', fontsize=14)
plt.xlabel('Occupation Type', fontsize=12)
plt.ylabel('Number of Respondents', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = occupation_summary[occupation_summary['Occupation'] == bar.get_label()]['Percentage'].values[0]
    plt.text(bar.get_x() + bar.get_width()/2, height,
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ==================== EDUCATION ANALYSIS ====================
education_data = [
    2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
    2, 2, 0, 2, 3, 2, 1, 1, 1, 2,
    2, 3, 2, 2, 1, 2, 2, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 1, 1, 2, 2,
    1, 2, 2, 2, 1, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 1, 0, 1,
    2, 1, 0, 0, 2, 2
]

education_df = pd.DataFrame(education_data, columns=['Education'])
education_df['Education'] = education_df['Education'].map({
    0: 'No Formal Education', 1: 'Primary', 
    2: 'High School', 3: 'Graduate', 4: 'Others'
})

education_counts = education_df['Education'].value_counts()
education_perc = (education_df['Education'].value_counts(normalize=True) * 100)

plt.figure(figsize=(10, 5))
bars = plt.bar(education_counts.index, education_counts.values,
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])
plt.title('Education Qualification Distribution', fontsize=14)
plt.xlabel('Education Level', fontsize=12)
plt.ylabel('Number of Respondents', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = education_perc[bar.get_label()]
    plt.text(bar.get_x() + bar.get_width()/2, height,
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Print all summaries
print("\n=== HOUSE TYPE SUMMARY ===")
print(pd.DataFrame({
    'House Type': house_counts.index,
    'Count': house_counts.values,
    'Percentage': house_perc.round(1).values
}).to_string(index=False))

print("\n=== AMENITIES SUMMARY ===")
print(pd.DataFrame({
    'Amenity': amenities_summary.index,
    'Households': amenities_summary.values,
    'Percentage (%)': amenities_perc.round(1).values
}).to_string(index=False))

print("\n=== OCCUPATION SUMMARY ===")
print(occupation_summary[['Occupation', 'Count', 'Percentage']]
      .rename(columns={'Percentage': 'Percentage (%)'})
      .round(1).to_string(index=False))

print("\n=== EDUCATION SUMMARY ===")
print(pd.DataFrame({
    'Education Level': education_counts.index,
    'Count': education_counts.values,
    'Percentage (%)': education_perc.round(1).values
}).to_string(index=False))


plt.style.use('seaborn')
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

# ==================== WEAVING EXPERIENCE ANALYSIS ====================
experience_data = [
    2, 1, 3, 3, 2, 2, 3, 0, 3, 3, 3, 3, 1, 3, 3, 3, 2, 1, 1, 2,
    3, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 0, 2, 2, 3, 1, 1, 1, 1, 2,
    0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 0, 3, 1, 3, 3, 1, 2, 1, 3,
    1, 3, 3, 3, 3, 3
]

exp_df = pd.DataFrame(experience_data, columns=['Experience'])
exp_df['Category'] = exp_df['Experience'].map({
    0: 'Less than 5 years',
    1: '5-10 years',
    2: '10-15 years', 
    3: 'More than 15 years'
})

exp_counts = exp_df['Category'].value_counts()
exp_perc = (exp_df['Category'].value_counts(normalize=True) * 100).round(1)

plt.figure(figsize=(10, 5))
bars = plt.bar(exp_counts.index, exp_counts.values, color=['#1f77b4','#ff7f0e','#2ca02c','#d62728'])
plt.title('Weaving Industry Experience', fontsize=14)
plt.xlabel('Experience Category', fontsize=12)
plt.ylabel('Number of Weavers', fontsize=12)

for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height, 
             f'{height}\n({exp_perc[bar.get_label()]}%)',
             ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ==================== MARKETING METHODS ANALYSIS ==================== 
marketing_data = [
    1, 2, 3, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 3, 1, 1, 1, 1, 1, 0, 
    2, 1, 1, 0, 1, 1, 0, 3, 1, 1, 1, 0, 0, 1, 1, 3, 3, 3, 3, 1, 
    3, 1, 1, 1, 1, 0, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 1, 0, 1, 3, 
    1, 1, 0, 1, 1, 1, 2, 0, 1
]

market_df = pd.DataFrame(marketing_data, columns=['Method'])
market_df['Method_Name'] = market_df['Method'].map({
    0: "Direct Sales",
    1: "Middlemen", 
    2: "Online Platform",
    3: "Wholesale Contact"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
market_df['Method_Name'].value_counts().plot(kind='bar', color='skyblue')
plt.title('Marketing Methods Distribution')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
market_df['Method_Name'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                           colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Product Marketing/Distribution Methods', y=1.05)
plt.tight_layout()
plt.show()

# ==================== SALES PROBLEMS ANALYSIS ====================
problem_data = [
    0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1,
    0, 1, 1, 0, 1, 0, 1, 1, 0, 1
]

prob_df = pd.DataFrame(problem_data, columns=['Problem'])
prob_df['Response'] = prob_df['Problem'].map({
    0: "Faced Problems",
    1: "No Problems"
})

plt.figure(figsize=(10, 4))
prob_df['Response'].value_counts().plot(kind='bar', color=['#ff7f0e','#1f77b4'])
plt.title('Problems Faced While Selling Products')
plt.xlabel('Response')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# ==================== RAW MATERIALS ANALYSIS ====================
materials_data = [
    1, [0,1], 1, 2, 3, 2, 2, 0, 1, 1, 2, [1,2], 1, 1, 1, 1, 3, 1, 1, 1, 
    3, 1, 1, 3, 3, [0,1,2,3], 3, [2,3], 1, [0,1], 3, 0, 1, 1, 2, 2, 2, 
    [0,1], 0, 1, 1, 1, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 3, 1, 3, 0, 1, 0, 
    2, 1, 1, 1, 1, 3, 0, 3
]

flat_materials = []
for entry in materials_data:
    if isinstance(entry, list):
        flat_materials.extend(entry)
    else:
        flat_materials.append(entry)

mat_df = pd.DataFrame(flat_materials, columns=['Material'])
mat_df['Type'] = mat_df['Material'].map({
    0: "Cotton",
    1: "Silk",
    2: "Muga",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
mat_df['Type'].value_counts().plot(kind='bar', color='coral')
plt.title('Raw Materials Used')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
mat_df['Type'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                 colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Primary Raw Materials in Weaving', y=1.05)
plt.tight_layout()
plt.show()

# ==================== PURCHASE SOURCES ANALYSIS ====================
purchase_data = [
    0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 1, [2,3], 0, [0,3], 1, 0, 1, 1, [0,1], 1,
    0, 1, 0, 0, 3, 2, 1, 2, 1, 0, 0, 0, 0, 2, 2, 2, 1, [0,1], 1, 1, 1, 1, 1,
    0, 0, 0, 0, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0
]

flat_purchase = []
for entry in purchase_data:
    if isinstance(entry, list):
        flat_purchase.extend(entry)
    else:
        flat_purchase.append(entry)

pur_df = pd.DataFrame(flat_purchase, columns=['Source'])
pur_df['Location'] = pur_df['Source'].map({
    0: "Local Suppliers",
    1: "Within Assam", 
    2: "Outside Assam",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
pur_df['Location'].value_counts().plot(kind='bar', color='plum')
plt.title('Raw Material Purchase Sources')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
pur_df['Location'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                     colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Where Raw Materials Are Purchased From', y=1.05)
plt.tight_layout()
plt.show()

# ==================== PURCHASE FACTORS ANALYSIS ====================
factors_data = [
    1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, [1,2], 0, 0, 1, 0, [0,1], 1,
    [0,1], 1, 1, 2, 2, 1, 2, 1, 1, [0,1], 0, 1, 0, 1, 1, [2,3], 1, [1,2], 1,
    1, 1, 2, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 2, 2
]

flat_factors = []
for entry in factors_data:
    if isinstance(entry, list):
        flat_factors.extend(entry)
    else:
        flat_factors.append(entry)

factor_df = pd.DataFrame(flat_factors, columns=['Factor'])
factor_df['Type'] = factor_df['Factor'].map({
    0: "Cost",
    1: "Quality",
    2: "Availability",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
factor_df['Type'].value_counts().plot(kind='bar', color='teal')
plt.title('Factors Influencing Material Choice')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
factor_df['Type'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                    colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Factors Affecting Raw Material Purchase', y=1.05)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# ==================== TECHNOLOGY ADOPTION ANALYSIS ====================
adoption_data = [
    (0, "50%-75%"), (1, ""), (0, "0%-25%"), (0, ""), (1, ""), (1, ""),
    (0, "25%-50%"), (0, "25%-50%"), (0, "25%-50%"), (1, ""), (1, ""),
    (0, "25%-50%"), (1, ""), (0, "25%-50%"), (0, "0%-25%"), (0, "0%-25%"),
    (0, "0%-25%"), (0, "0%-25%"), (1, ""), (1, ""), (1, ""), (1, ""),
    (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""),
    (0, "0%-25%"), (0, "0%-25%"), (0, "25%-50%"), (1, ""), (0, "0%-25%"),
    (0, "25%-50%"), (0, "25%-50%"), (0, "0%-25%"), (0, "75%-100%"), (0, "50%-75%"),
    (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "75%-100%"), (0, "0%-25%"),
    (1, ""), (1, ""), (1, ""), (0, "75%-100%"), (1, ""), (0, "0%-25%"),
    (1, ""), (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "0%-25%"), (0, "0%-25%"),
    (0, "25%-50%"), (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "50%-75%"), (0, "0%-25%")
]

df = pd.DataFrame(adoption_data, columns=['Adoption', 'Level'])
adoption_counts = df['Adoption'].value_counts()
level_counts = df[df['Adoption'] == 0]['Level'].value_counts()

print("\nAdoption Summary:")
print(f"Adopted: {adoption_counts[0]} weavers")
print(f"Not Adopted: {adoption_counts[1]} weavers")
print("\nAdoption Levels:")
print(level_counts)

# ==================== COST CHANGE ANALYSIS ====================
cost_data = [
    (0, "increase 10%-20%"), (1, ""), (1, ""), (0, "increase 0%-10%"),
    (0, "increase 10%-20%"), (0, "increase 0%-10%"), (0, "increase 10%-20%"), (1, ""),
    (0, "decrease 0%-10%"), (0, "increase 0%-10%"), (1, ""), (0, "decrease 0%-10%"),
    (0, "increase 0%-10%"), (0, "increase 0%-10%"), (0, "increase 0%-10%"), (0, "increase 0%-10%"), (1, ""),
    (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""),
    (0, "increase 0%-10%"), (1, ""), (1, ""), (0, "increase 0%-10%"), (0, "decrease 0%-10%"), (0, "decrease 0%-10%"), (1, ""),
    (0, "increase 0%-10%"), (0, "increase by 10-20%"), (0, "increase by 10%-20%"), (0, "increase by 10%- 20%"), (1, ""),
    (0, "increase by 0% - 10%"), (1, ""), (0, "increase by 0%- 10%"), (0, "decrease by 0% - 10%"), (1, ""),
    (0, "increase by 0% - 10%"), (1, ""), (1, ""), (1, ""), (0, "increase by 10% - 20%"), (1, ""),
    (0, "increase by 0 - 10%"), (1, ""), (1, ""), (0, "increase by 10%-20%"), (0, "increase by 0% - 10%"),
    (0, "increase by 10%- 20%"), (0, "decrease by 10% - 20%"), (0, "decrease by 10% - 20%"), (1, ""),
    (0, "decrease by 10% - 20%"), (0, "increase by 10%- 20%"), (0, "increase by 0%-10%"), (0, "decrease by 0-10%")
]

df = pd.DataFrame(cost_data, columns=['Response', 'Change'])
df['Change'] = df['Change'].str.lower().str.strip()
df['Change'] = df['Change'].str.replace('by ', '').str.replace(' ', '')

adopters = df[df['Response'] == 0]
change_counts = adopters['Change'].value_counts()
change_percent = (change_counts / len(adopters) * 100)

print("\nCost Changes Among Adopters:")
print(change_counts)
print("\nPercentage Distribution:")
print(change_percent.round(1))

# ==================== PRODUCTION CHANGE ANALYSIS ====================
production_data = [
    1, "N/A", 3, 2, 3, 3, 3, 3, 3, 0, 3, "N/A", 2, 2, 3, 3, 3, 3, 2, "N/A",
    "N/A", 3, 2, 2, 2, 2, "N/A", 2, 2, "N/A", "N/A", "N/A", "N/A", "N/A", 2,
    2, 2, 2, 3, 3, 3, 2, 3, "N/A", 3, 3, 2, 3, "N/A", "N/A", "N/A", 3, "N/A",
    3, "N/A", "N/A", 3, 3, 3, 3, 0, "N/A", 3, 2, 0, 0
]

df = pd.DataFrame(production_data, columns=['Response'])
df['Response'] = pd.to_numeric(df['Response'], errors='coerce')
valid_responses = df.dropna()
response_counts = valid_responses['Response'].value_counts().sort_index()
percentages = (response_counts / len(valid_responses)) * 100

categories = {
    0: "Decreased by 0-10%",
    1: "Decreased by 11-20%",
    2: "No significant change",
    3: "Increased significantly"
}

print("\nProduction Cost Changes:")
for code, count in response_counts.items():
    print(f"{categories[code]}: {count} weavers ({percentages[code]:.1f}%)")

plt.figure(figsize=(10, 6))
response_counts.plot(kind='bar', color=['green', 'lightgreen', 'gray', 'red'])
plt.title('Production Cost Changes After Adoption')
plt.xticks(ticks=range(len(categories)), labels=[categories[i] for i in sorted(categories.keys())], rotation=45)
plt.tight_layout()
plt.show()

# ==================== INCOME ANALYSIS ====================
income_data = [
    ("H", 6000), ("P", 3500), ("P", 4000), None, None, None, None,
    ("H", 2000), ("H", 6000), ("H", 6000), ("H", 7000), ("H", 5000), 
    ("H", 10000), ("H", 5000), ("P", 500), ("H", 5000), ("P", 5000), 
    ("P", "15% of P"), ("H", 7000), ("P", 5000), ("P", "25% of P"),
    ("H", 4500), ("H", 4500), ("H", 4500), ("H", 5500), ("P", 3500),
    None, None, None, ("P", 1000), ("P", 1500), None, None, None, None,
    ("H", 2000), None, None, None, ("H", 4000), ("P", 2000),
    None, None, None, None, None, None, None, ("H", 2000),
    ("H", 2000), ("H", 3000), ("H", 5000), ("H", 6000), ("H", 1500),
    ("H", 2000), ("H", 3000), ("H", 2000), ("H", 5000), ("H", 2500),
    ("H", 2000), ("H", 3000), ("H", 2500), ("H", 3000), ("H", 4000),
    ("P", 2000), ("H", 2000), ("H", 2500), ("H", 5000), ("H", 5000),
    ("H", 6000), ("H", 6000), ("H", 4000), ("P", 3000), ("H", 2000),
    ("H", 5000), ("P", 4000), ("H", 2500), ("P", 1000), ("P", 1100),
    ("P", 1200)
]

h_values = [item[1] for item in income_data if item is not None and item[0] == "H" and isinstance(item[1], int)]
p_values = [item[1] for item in income_data if item is not None and item[0] == "P" and isinstance(item[1], int)]

print("\nSorted H Incomes:", sorted(h_values))
print("\nSorted P Incomes:", sorted(p_values))

# ==================== PROFIT MARGIN ANALYSIS ==================== 
profit_data = [
    20, "15%-25%", "N/A", "N/A", "N/A", "₹ 300.00", "N/A", "N/A", "N/A", 2000,
    "N/A", "N/A", "N/A", "N/A", "50%", "25%", 2000, 2000, 2000, 2000,
    "N/A", "N/A", "N/A", 7500, 250, 400, "N/A", "5%", 2500, "N/A",
    2000, ">400", "10%", 250, 550, 550, ">400", 2000, 2000, 1500,
    2500, 3000, 2000, "N/A", "N/A", 200, 4000, 2500, 400, "N/A",
    "N/A", 3000, "N/A", 2000, "N/A", "N/A", 4000, 2500, 2500, 2000,
    4000, "N/A", 2000, 5000, 2200, 3000
]

# Process data
numeric_values = []
percentage_values = []

for item in profit_data:
    if isinstance(item, int):
        numeric_values.append(item)
    elif isinstance(item, str):
        if item.endswith('%'):
            percentage_values.append(float(item.replace('%', '')))
        elif item.replace('.', '').isdigit():
            numeric_values.append(float(item))
        elif item.startswith('₹'):
            numeric_values.append(float(item.replace('₹', '').strip()))
        elif item.startswith('>'):
            numeric_values.append(float(item.replace('>', '')))

# Calculate averages
avg_numeric = sum(numeric_values) / len(numeric_values) if numeric_values else 0
avg_percentage = sum(percentage_values) / len(percentage_values) if percentage_values else 0

# Results
print(f"Average numeric profit: ₹{avg_numeric:,.2f}")
print(f"Average percentage profit: {avg_percentage:.1f}%")
print(f"\nTotal valid numeric entries: {len(numeric_values)}")
print(f"Total valid percentage entries: {len(percentage_values)}")
print(f"Total N/A entries: {profit_data.count('N/A')}")

# Data distribution
print("\nNumeric Profit Distribution:")
print(f"Minimum: ₹{min(numeric_values)}")
print(f"Maximum: ₹{max(numeric_values)}")
print(f"Median: ₹{sorted(numeric_values)[len(numeric_values)//2]}")

print("\nPercentage Profit Distribution:")
print(f"Minimum: {min(percentage_values)}%")
print(f"Maximum: {max(percentage_values)}%")
print(f"Median: {sorted(percentage_values)[len(percentage_values)//2]}%")

# ==================== POWERLOOM vs HANDLOOM PROFIT ANALYSIS ====================
data = [
    "N/A",
    "P=15%-25%, H=30%-55%",
    "N/A",
    "N/A",
    "H=50%", 
    "H=300-600",
    "H=2500",
    "H=3000, P=2000",
    "H=1000, P=1000",
    "H=1000, P=2000",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "P=65%, H=75%",
    "P=75%, H=50%",
    "H=1000, P=1000",
    "H=1000, P=2000",
    "H=1000, P=2000",
    "H=500, P=2000",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "H=2000, P=500",
    "N/A",
    "H=1500",
    "N/A",
    "H=450",
    "P=10%, H=5%",
    "H=450, P=250",
    "H=450, P=250",
    "H=250, P=450",
    "P=15%-25%, H=35%-50%",
    "H=1000, P=2000",
    "P=2000, H=1000",
    "P=1000, H=1500",
    "P=2500, H=1250",
    "P=3000, H=2500",
    "P=2000, H=500",
    "H=1000",
    "H=3000",
    "P=200, H=100",
    "P=4000, H=3000",
    "P=2500, H=2000",
    "P=400, H=300",
    "H=3000",
    "H=2500",
    "P=3000, H=2000",
    "H=2000",
    "P=2000, H=1000",
    "H=2000",
    "H=2000",
    "P=4000, H=3000",
    "P=2000, H=1250",
    "P=2500, H=1250",
    "P=2000, H=1000",
    "P=4000, H=3000",
    "H=2500",
    "P=2000, H=500",
    "P=5000, H=8000",
    "P=2200, H=N/A",
    "P=3000, H=N/A"
]

# Initialize variables
p_values = []
h_values = []
p_percent = []
h_percent = []
na_count = 0

# Process data
for item in data:
    if item == "N/A":
        na_count += 1
        continue
    
    # Process percentage values
    if '%' in item:
        parts = item.split(', ')
        for part in parts:
            if 'P=' in part and '%' in part:
                val = part.split('=')[1].replace('%','').strip()
                if '-' in val:
                    p_range = [float(x) for x in val.split('-')]
                    p_percent.append(sum(p_range)/len(p_range))
                else:
                    p_percent.append(float(val))
            if 'H=' in part and '%' in part:
                val = part.split('=')[1].replace('%','').strip()
                if '-' in val:
                    h_range = [float(x) for x in val.split('-')]
                    h_percent.append(sum(h_range)/len(h_range))
                else:
                    h_percent.append(float(val))
    
    # Process numeric values
    else:
        parts = item.split(', ')
        for part in parts:
            if 'P=' in part and not '%' in part:
                val = part.split('=')[1].strip()
                if val.replace('-','').isdigit():
                    if '-' in val:
                        p_range = [float(x) for x in val.split('-')]
                        p_values.append(sum(p_range)/len(p_range))
                    else:
                        p_values.append(float(val))
            if 'H=' in part and not '%' in part:
                val = part.split('=')[1].strip()
                if val.replace('-','').isdigit() and val != "N/A":
                    if '-' in val:
                        h_range = [float(x) for x in val.split('-')]
                        h_values.append(sum(h_range)/len(h_range))
                    else:
                        h_values.append(float(val))
            elif part.startswith('H=') and part.endswith('%'):
                continue
            elif part.startswith('H') and not '=' in part and part[1:].replace('-','').isdigit():
                h_values.append(float(part[1:]))

# Calculate averages
avg_p_value = sum(p_values)/len(p_values) if p_values else 0
avg_h_value = sum(h_values)/len(h_values) if h_values else 0
avg_p_percent = sum(p_percent)/len(p_percent) if p_percent else 0
avg_h_percent = sum(h_percent)/len(h_percent) if h_percent else 0

# Results
print("=== NUMERIC PROFIT COMPARISON ===")
print(f"Powerloom average: ₹{avg_p_value:,.2f}")
print(f"Handloom average: ₹{avg_h_value:,.2f}")
print(f"Difference: ₹{avg_h_value-avg_p_value:,.2f} ({((avg_h_value-avg_p_value)/avg_p_value)*100:.1f}% higher)\n")

print("=== PERCENTAGE PROFIT COMPARISON ===")
print(f"Powerloom average: {avg_p_percent:.1f}%")
print(f"Handloom average: {avg_h_percent:.1f}%")
print(f"Difference: {avg_h_percent-avg_p_percent:.1f}% points\n")

print("=== DATA SUMMARY ===")
print(f"Total entries: {len(data)}")
print(f"N/A entries: {na_count}")
print(f"Valid numeric comparisons: {len(p_values)}")
print(f"Valid percentage comparisons: {len(p_percent)}")

print("\n=== VALUE DISTRIBUTION ===")
print("Powerloom numeric profits:")
print(f"Min: ₹{min(p_values) if p_values else 'N/A'}")
print(f"Max: ₹{max(p_values) if p_values else 'N/A'}")
print(f"Median: ₹{sorted(p_values)[len(p_values)//2] if p_values else 'N/A'}")

print("\nHandloom numeric profits:")
print(f"Min: ₹{min(h_values) if h_values else 'N/A'}")
print(f"Max: ₹{max(h_values) if h_values else 'N/A'}")
print(f"Median: ₹{sorted(h_values)[len(h_values)//2] if h_values else 'N/A'}")

# ==================== TECHNOLOGY IMPACT ANALYSIS ====================
data = [
    "0", "10%-20%", ">30%", "3", "N/A", "N/A", "N/A", "20%-30%", "20%-30%", "20%-30%",
    "0%-10%", "N/A", "0%-10%", "N/A", "10%-20%", "0%-10%", "10%-20%", "10%-20%", "10%-20%", ">30%",
    "N/A", "N/A", "N/A", "N/A", "N/A", "0%-10%", "N/A", "10%-20%", "N/A", "N/A",
    "N/A", "N/A", "0%-10%", "10%-20%", "10%-20%", "10%-20%", "0%-10%", "0%-10%", "10%-20%", "0%-10%",
    "10%-20%", "0%-10%", ">30%", "N/A", "N/A", "10%-20%", "0%-10%", ">30%", "0%-10%", "N/A",
    "N/A", "20%-30%", "N/A", "10%-20%", "N/A", "N/A", "20%-30%", ">30%", "20%-30%", ">30%",
    "0%-10%", "N/A", ">30%", "20%-30%", "10%-20%", "0%-10%"
]

# Initialize counters
categories = {
    "0-10%": 0,
    "10-20%": 0,
    "20-30%": 0,
    ">30%": 0,
    "N/A": 0
}

# Process data
for item in data:
    if item == "N/A":
        categories["N/A"] += 1
    elif item in ["0", "0%-10%"]:
        categories["0-10%"] += 1
    elif item in ["10%-20%", "1"]:
        categories["10-20%"] += 1
    elif item in ["20%-30%", "2"]:
        categories["20-30%"] += 1
    elif item in [">30%", "3"]:
        categories[">30%"] += 1

# Calculate percentages
total_valid = len(data) - categories["N/A"]
percentages = {k: (v/total_valid)*100 for k, v in categories.items() if k != "N/A"}

# Results
print("=== TECHNOLOGY IMPACT DISTRIBUTION ===")
print(f"0-10% increase: {categories['0-10%']} cases ({percentages['0-10%']:.1f}%)")
print(f"10-20% increase: {categories['10-20%']} cases ({percentages['10-20%']:.1f}%)")
print(f"20-30% increase: {categories['20-30%']} cases ({percentages['20-30%']:.1f}%)")
print(f">30% increase: {categories['>30%']} cases ({percentages['>30%']:.1f}%)")
print(f"\nN/A or missing data: {categories['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"Most common impact range: 10-20% increase ({categories['10-20%']} cases)")
print(f"Significant improvements (>20%): {categories['20-30%'] + categories['>30%']} cases")
print(f"No improvement (0-10%): {categories['0-10%']} cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['0-10%', '10-20%', '20-30%', '>30%']
values = [categories[l] for l in labels]

plt.figure(figsize=(10, 6))
plt.bar(labels, values, color=['lightgray', 'lightblue', 'blue', 'darkblue'])
plt.title('Productivity Improvement After Technology Adoption')
plt.xlabel('Improvement Range')
plt.ylabel('Number of Cases')
plt.show()

# ==================== INCOME CHANGE ANALYSIS ====================
data = [
    (0, 1), (1, ""), (0, 0), (0, 1), (0, 1), (0, 1), (1, ""), (1, ""),
    (0, 2), (0, 0), (1, ""), (0, 2), (0, 0), (0, 0), (0, 0), (0, 0), (1, ""),
    (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""),
    (0, 0), (1, ""), (1, ""), (0, 0), (0, 2), (0, 2), (1, ""), (0, 0), (0, 1), (0, 1),
    (0, 1), (1, ""), (0, 0), (0, 2), (1, ""), (0, 0), (1, ""), (1, ""), (1, ""), (0, 1),
    (1, ""), (0, 0), (1, ""), (1, ""), (0, 1), (0, 0), (0, 1), (0, 3), (0, 3), (1, ""),
    (0, 3), (0, 1), (0, 0), (0, 2)
]

# Initialize counters
response_counts = {
    "Yes": 0,
    "No": 0
}

change_counts = {
    "Increased 0-5%": 0,
    "Increased 5-10%": 0,
    "Decreased 0-5%": 0,
    "Decreased 5-10%": 0
}

# Process data
for response, change in data:
    if response == 0:
        response_counts["Yes"] += 1
        if change == 0:
            change_counts["Increased 0-5%"] += 1
        elif change == 1:
            change_counts["Increased 5-10%"] += 1
        elif change == 2:
            change_counts["Decreased 0-5%"] += 1
        elif change == 3:
            change_counts["Decreased 5-10%"] += 1
    else:
        response_counts["No"] += 1

# Calculate percentages
total_responses = len(data)
yes_percent = (response_counts["Yes"] / total_responses) * 100
no_percent = (response_counts["No"] / total_responses) * 100

if response_counts["Yes"] > 0:
    change_percent = {k: (v / response_counts["Yes"]) * 100 for k, v in change_counts.items()}

# Results
print("=== INCOME CHANGE SUMMARY ===")
print(f"Reported income changes: {response_counts['Yes']} weavers ({yes_percent:.1f}%)")
print(f"No reported changes: {response_counts['No']} weavers ({no_percent:.1f}%)")

print("\n=== CHANGE DISTRIBUTION (AMONG RESPONDENTS WHO REPORTED CHANGES) ===")
for change, count in change_counts.items():
    print(f"{change}: {count} weavers ({change_percent[change]:.1f}%)")

print("\n=== KEY FINDINGS ===")
print(f"Net positive changes: {change_counts['Increased 0-5%'] + change_counts['Increased 5-10%']} weavers")
print(f"Net negative changes: {change_counts['Decreased 0-5%'] + change_counts['Decreased 5-10%']} weavers")
print(f"Most common outcome: Increased 0-5% ({change_counts['Increased 0-5%']} cases)")

# Visualization
import matplotlib.pyplot as plt

# Response distribution
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
response_labels = ['Reported Changes', 'No Changes']
response_values = [response_counts['Yes'], response_counts['No']]
plt.pie(response_values, labels=response_labels, autopct='%1.1f%%', colors=['lightblue', 'lightgray'])
plt.title('Income Change Reporting')

# Change distribution
plt.subplot(1, 2, 2)
change_labels = ['+0-5%', '+5-10%', '-0-5%', '-5-10%']
change_values = list(change_counts.values())
plt.bar(change_labels, change_values, color=['green', 'darkgreen', 'red', 'darkred'])
plt.title('Reported Income Changes')
plt.ylabel('Number of Weavers')

plt.tight_layout()
plt.show()

# ==================== STAFF TRAINING ANALYSIS ====================
data = [
    0, 1, 0, 1, 1, 0, "N/A", 1, 1, 1,
    "N/A", "N/A", 0, 1, 1, 1, 0, 1, "N/A", "N/A",
    "N/A", "N/A", "N/A", 0, 1, 1, 1, "N/A", "N/A", 0,
    1, 0, 1, 0, 1, 1, 0, 1, "N/A", 1,
    0, 1, 0, 1, 1, 1, 1, 1, 0, 1,
    0, "N/A", 1, 0, 1, 0, 1, "N/A", 0, 1,
    0, "N/A", 1, 0, 1, 1
]

# Initialize counters
training_counts = {
    "Yes": 0,
    "No": 0,
    "N/A": 0
}

# Process data
for response in data:
    if response == 0:
        training_counts["Yes"] += 1
    elif response == 1:
        training_counts["No"] += 1
    else:
        training_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - training_counts["N/A"]
yes_percent = (training_counts["Yes"] / valid_responses) * 100
no_percent = (training_counts["No"] / valid_responses) * 100

# Results
print("=== STAFF TRAINING PROVISION ===")
print(f"Provided training: {training_counts['Yes']} weavers ({yes_percent:.1f}%)")
print(f"Did not provide training: {training_counts['No']} weavers ({no_percent:.1f}%)")
print(f"Missing data: {training_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Training was provided in {training_counts['Yes']} out of {valid_responses} valid cases")
print(f"2. {no_percent:.1f}% of weavers did not train their existing staff")
print(f"3. Training provision rate: {yes_percent:.1f}%")

# Visualization
import matplotlib.pyplot as plt

# Filter out N/A for visualization
labels = ['Provided Training', 'No Training']
values = [training_counts['Yes'], training_counts['No']]
colors = ['#4CAF50', '#F44336']

plt.figure(figsize=(8, 6))
plt.bar(labels, values, color=colors)
plt.title('Staff Training Provision After Technology Implementation')
plt.ylabel('Number of Weavers')
plt.text(0, values[0], f"{values[0]} ({yes_percent:.1f}%)", ha='center', va='bottom')
plt.text(1, values[1], f"{values[1]} ({no_percent:.1f}%)", ha='center', va='bottom')
plt.show()

# ==================== NEW STAFF EMPLOYMENT ANALYSIS ====================
data = [
    1, 1, 0, 1, 1, "N/A", "N/A", 1, 0, 1,
    "N/A", "N/A", 0, 1, 1, 0, 1, 0, "N/A", "N/A",
    "N/A", "N/A", "N/A", 0, 1, 1, 0, "N/A", "N/A", 1,
    0, 1, 0, 1, 0, 1, 0, "N/A", 1, 0,
    1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
    "N/A", 1, 0, 1, 0, 1, "N/A", 0, 1, 1,
    1, "N/A", 0, 1, 1, 1
]

# Initialize counters
employment_counts = {
    "Hired New Staff": 0,    # 0=Yes
    "No New Staff": 0,       # 1=No
    "N/A": 0
}

# Process data
for response in data:
    if isinstance(response, str):
        if "N/A" in response:
            employment_counts["N/A"] += 1
        elif "0" in response:  # Handles cases like "0 (1)"
            employment_counts["Hired New Staff"] += 1
    else:
        if response == 0:
            employment_counts["Hired New Staff"] += 1
        else:
            employment_counts["No New Staff"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - employment_counts["N/A"]
yes_percent = (employment_counts["Hired New Staff"] / valid_responses) * 100
no_percent = (employment_counts["No New Staff"] / valid_responses) * 100

# Results
print("=== NEW STAFF EMPLOYMENT ===")
print(f"Hired new staff: {employment_counts['Hired New Staff']} weavers ({yes_percent:.1f}%)")
print(f"Did not hire: {employment_counts['No New Staff']} weavers ({no_percent:.1f}%)")
print(f"Missing data: {employment_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Only {employment_counts['Hired New Staff']} weavers ({yes_percent:.1f}%) hired new staff post-implementation")
print(f"2. Majority ({employment_counts['No New Staff']} weavers) maintained existing staffing levels")
print(f"3. New hires occurred in about 1 out of every 3 cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['Hired New Staff', 'No New Hires']
values = [employment_counts['Hired New Staff'], employment_counts['No New Staff']]
colors = ['#FFA500', '#4682B4']  # Orange and Steel Blue

plt.figure(figsize=(8, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('New Staff Employment After Technology Implementation')
plt.ylabel('Number of Weavers')

# Add value labels on bars
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height} ({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== JOB LOSS ANALYSIS ====================
data = [
    (0, "2-3"), 1, 1, 0, 1, "N/A", "N/A", 1, 1, 1,
    "N/A", "N/A", 1, 1, 1, 1, 1, 0, "N/A", "N/A",
    "N/A", "N/A", "N/A", 1, 1, 1, 1, "N/A", "N/A", 1,
    1, 0, 1, 1, 1, 1, 0, "N/A", 1, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, "N/A",
    1, 1, 1, 1, 1, "N/A", 1, 1, 1, (0, 4),
    "N/A", 1, (0, 2), 1, 1
]

# Initialize counters
loss_counts = {
    "Job Losses": 0,
    "No Job Losses": 0,
    "N/A": 0
}

loss_magnitude = []

# Process data
for item in data:
    if isinstance(item, tuple):  # Cases with magnitude (0, "2-3")
        loss_counts["Job Losses"] += 1
        loss_magnitude.append(item[1])
    elif item == 0:
        loss_counts["Job Losses"] += 1
        loss_magnitude.append("1")  # Default 1 if no number specified
    elif item == 1:
        loss_counts["No Job Losses"] += 1
    else:
        loss_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - loss_counts["N/A"]
loss_percent = (loss_counts["Job Losses"] / valid_responses) * 100
no_loss_percent = (loss_counts["No Job Losses"] / valid_responses) * 100

# Analyze loss magnitude
magnitude_summary = {
    "1 worker": loss_magnitude.count("1"),
    "2 workers": loss_magnitude.count("2"),
    "3 workers": loss_magnitude.count("3"),
    "4 workers": loss_magnitude.count("4"),
    "2-3 workers": loss_magnitude.count("2-3")
}

# Results
print("=== JOB LOSS ANALYSIS ===")
print(f"Reported job losses: {loss_counts['Job Losses']} cases ({loss_percent:.1f}%)")
print(f"No job losses: {loss_counts['No Job Losses']} cases ({no_loss_percent:.1f}%)")
print(f"Missing data: {loss_counts['N/A']} cases")

print("\n=== JOB LOSS MAGNITUDE ===")
for range, count in magnitude_summary.items():
    if count > 0:
        print(f"{range}: {count} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Job losses occurred in {loss_counts['Job Losses']} out of {valid_responses} cases")
print(f"2. Most common outcome was no job losses ({no_loss_percent:.1f}% of cases)")
print(f"3. When losses occurred, typically affected 1-3 workers per enterprise")

# Visualization
import matplotlib.pyplot as plt

# Figure 1: Loss vs No Loss
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
labels = ['Job Losses', 'No Job Losses']
values = [loss_counts['Job Losses'], loss_counts['No Job Losses']]
colors = ['#FF6347', '#90EE90']  # Tomato and Light Green
bars = plt.bar(labels, values, color=colors)
plt.title('Job Loss Occurrence')
plt.ylabel('Number of Cases')
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

# Figure 2: Loss Magnitude
plt.subplot(1, 2, 2)
magnitude_labels = [k for k,v in magnitude_summary.items() if v > 0]
magnitude_values = [v for v in magnitude_summary.values() if v > 0]
plt.bar(magnitude_labels, magnitude_values, color='#FFA07A')  # Light Salmon
plt.title('Workers Affected When Losses Occurred')
plt.ylabel('Number of Cases')
plt.xticks(rotation=45)
for i, v in enumerate(magnitude_values):
    plt.text(i, v, str(v), ha='center', va='bottom')

plt.tight_layout()
plt.show()
# ==================== JOB LOSS ANALYSIS ====================
data = [
    (0, "2-3"), 1, 1, 0, 1, "N/A", "N/A", 1, 1, 1,
    "N/A", "N/A", 1, 1, 1, 1, 1, 0, "N/A", "N/A",
    "N/A", "N/A", "N/A", 1, 1, 1, 1, "N/A", "N/A", 1,
    1, 0, 1, 1, 1, 1, 0, "N/A", 1, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, "N/A",
    1, 1, 1, 1, 1, "N/A", 1, 1, 1, (0, 4),
    "N/A", 1, (0, 2), 1, 1
]

# Initialize counters
loss_counts = {
    "Job Losses": 0,
    "No Job Losses": 0,
    "N/A": 0
}

loss_magnitude = []

# Process data
for item in data:
    if isinstance(item, tuple):  # Cases with magnitude (0, "2-3")
        loss_counts["Job Losses"] += 1
        loss_magnitude.append(item[1])
    elif item == 0:
        loss_counts["Job Losses"] += 1
        loss_magnitude.append("1")  # Default 1 if no number specified
    elif item == 1:
        loss_counts["No Job Losses"] += 1
    else:
        loss_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - loss_counts["N/A"]
loss_percent = (loss_counts["Job Losses"] / valid_responses) * 100
no_loss_percent = (loss_counts["No Job Losses"] / valid_responses) * 100

# Analyze loss magnitude
magnitude_summary = {
    "1 worker": loss_magnitude.count("1"),
    "2 workers": loss_magnitude.count("2"),
    "3 workers": loss_magnitude.count("3"),
    "4 workers": loss_magnitude.count("4"),
    "2-3 workers": loss_magnitude.count("2-3")
}

# Results
print("=== JOB LOSS ANALYSIS ===")
print(f"Reported job losses: {loss_counts['Job Losses']} cases ({loss_percent:.1f}%)")
print(f"No job losses: {loss_counts['No Job Losses']} cases ({no_loss_percent:.1f}%)")
print(f"Missing data: {loss_counts['N/A']} cases")

print("\n=== JOB LOSS MAGNITUDE ===")
for range, count in magnitude_summary.items():
    if count > 0:
        print(f"{range}: {count} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Job losses occurred in {loss_counts['Job Losses']} out of {valid_responses} cases")
print(f"2. Most common outcome was no job losses ({no_loss_percent:.1f}% of cases)")
print(f"3. When losses occurred, typically affected 1-3 workers per enterprise")

# Visualization
import matplotlib.pyplot as plt

# Figure 1: Loss vs No Loss
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
labels = ['Job Losses', 'No Job Losses']
values = [loss_counts['Job Losses'], loss_counts['No Job Losses']]
colors = ['#FF6347', '#90EE90']  # Tomato and Light Green
bars = plt.bar(labels, values, color=colors)
plt.title('Job Loss Occurrence')
plt.ylabel('Number of Cases')
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

# Figure 2: Loss Magnitude
plt.subplot(1, 2, 2)
magnitude_labels = [k for k,v in magnitude_summary.items() if v > 0]
magnitude_values = [v for v in magnitude_summary.values() if v > 0]
plt.bar(magnitude_labels, magnitude_values, color='#FFA07A')  # Light Salmon
plt.title('Workers Affected When Losses Occurred')
plt.ylabel('Number of Cases')
plt.xticks(rotation=45)
for i, v in enumerate(magnitude_values):
    plt.text(i, v, str(v), ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ==================== ALTERNATIVE INCOME ANALYSIS ====================
data = [
    (0, "20%-30%"), (0, 3), 1, 1, 1, "N/A", "N/A", (0, "20%-30%"), 1, 0,
    "N/A", "N/A", 1, 1, 1, (0, "10%-20%"), (0, "<10%"), (0, "10%-20%"), (0, ">30%"), "N/A",
    "N/A", "N/A", "N/A", "N/A", 1, 1, 1, "N/A", "N/A", 1,
    (0, "10%-20%"), (0, "<10%"), (0, "10%-20%"), (0, "10%-20%"), (0, "<10%"), (0, "20%-30%"), "N/A", 1, (0, ">30%"), 1,
    (0, "20%-30%"), (0, "<10%"), (0, "20%-30%"), 1, 1, 1, 1, 1, (0, "10%-20%"), 1,
    "N/A", 1, (0, ">30%"), (0, "10%-20%"), 1, "N/A", (0, "<10%"), 1, 1, 1,
    (0, ">30%"), 1, (0, "<10%"), 1, 1, 1
]

# Initialize counters
income_counts = {
    "Has Other Income": 0,
    "No Other Income": 0,
    "N/A": 0
}

income_ranges = {
    "<10%": 0,
    "10%-20%": 0,
    "20%-30%": 0,
    ">30%": 0
}

# Process data
for item in data:
    if isinstance(item, tuple):  # Cases with percentage (0, "20%-30%")
        income_counts["Has Other Income"] += 1
        if isinstance(item[1], int):  # Handle (0, 3) case
            income_ranges[">30%"] += 1
        else:
            range_key = item[1]
            income_ranges[range_key] += 1
    elif item == 0:
        income_counts["Has Other Income"] += 1
        income_ranges["<10%"] += 1  # Default to <10% if no range specified
    elif item == 1:
        income_counts["No Other Income"] += 1
    else:
        income_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - income_counts["N/A"]
has_income_percent = (income_counts["Has Other Income"] / valid_responses) * 100
no_income_percent = (income_counts["No Other Income"] / valid_responses) * 100

# Calculate income distribution percentages
total_with_income = income_counts["Has Other Income"]
income_distribution = {k: (v / total_with_income) * 100 for k, v in income_ranges.items()}

# Results
print("=== ALTERNATIVE INCOME SOURCES ===")
print(f"Weavers with other income: {income_counts['Has Other Income']} ({has_income_percent:.1f}%)")
print(f"Weavers without other income: {income_counts['No Other Income']} ({no_income_percent:.1f}%)")
print(f"Missing data: {income_counts['N/A']} cases")

print("\n=== INCOME DISTRIBUTION (AMONG THOSE WITH OTHER INCOME) ===")
for range, count in income_ranges.items():
    print(f"{range} of income: {count} cases ({income_distribution[range]:.1f}%)")

print("\n=== KEY FINDINGS ===")
print(f"1. {has_income_percent:.1f}% of weavers have supplemental income sources")
print(f"2. Most common supplemental income range: 10%-20% of total income")
print(f"3. {income_ranges['>30%']} cases rely significantly (>30%) on non-weaving income")

# Visualization
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 5))

# Chart 1: Income Source Presence
plt.subplot(1, 2, 1)
presence_labels = ['Has Other Income', 'No Other Income']
presence_values = [income_counts['Has Other Income'], income_counts['No Other Income']]
presence_colors = ['#4CAF50', '#F44336']
bars = plt.bar(presence_labels, presence_values, color=presence_colors)
plt.title('Presence of Alternative Income Sources')
plt.ylabel('Number of Weavers')
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

# Chart 2: Income Range Distribution
plt.subplot(1, 2, 2)
range_labels = list(income_ranges.keys())
range_values = list(income_ranges.values())
range_colors = ['#FFD700', '#FFA500', '#FF8C00', '#FF4500']
plt.bar(range_labels, range_values, color=range_colors)
plt.title('Alternative Income Contribution Ranges')
plt.ylabel('Number of Weavers')
for i, v in enumerate(range_values):
    plt.text(i, v, f"{v}\n({income_distribution[range_labels[i]]:.1f}%)", ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ==================== POWERLOOM vs HANDLOOM PROFITABILITY ANALYSIS ====================
data = [
    "N/A", (0, "10%-20%"), (0, "20%-30%"), "N/A", (0, "<10%"), 1, "N/A", 
    (0, "20%-30%"), (0, "10%-20%"), (0, "10%-20%"), (0, "<10%"), "N/A", 
    1, 1, 1, (0, "10%-20%"), (0, "<10%"), (0, "10%-20%"), 1, "N/A",
    "N/A", "N/A", "N/A", "N/A", 1, 1, 1, "N/A", "N/A", 1,
    (0, "10%-20%"), (0, "<10%"), (0, "10%-20%"), (0, "10%-20%"), 1, (0, "20%-30%"), "N/A", 
    1, (0, ">30%"), 1, (0, "20%-30%"), (0, "<10%"), (0, "20%-30%"), 1, 
    1, 1, 1, 1, (0, "10%-20%"), 1, "N/A", 
    1, (0, ">30%"), (0, "10%-20%"), 1, "N/A", (0, "<10%"), (0, "<10%"), 
    (0, ">30%"), 1, (0, "10%-20%"), "N/A", (0, "<10%"), 1, (0, "<10%"), (0, "<10%")
]

# Initialize counters
profit_comparison = {
    "Powerloom More Profitable": 0,
    "Handloom More Profitable": 0,
    "N/A": 0
}

profit_ranges = {
    "<10%": 0,
    "10%-20%": 0,
    "20%-30%": 0,
    ">30%": 0
}

# Process data
for item in data:
    if isinstance(item, tuple):  # Cases with percentage (0, "10%-20%")
        profit_comparison["Handloom More Profitable"] += 1
        range_key = item[1]
        profit_ranges[range_key] += 1
    elif item == 1:
        profit_comparison["Powerloom More Profitable"] += 1
    else:
        profit_comparison["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - profit_comparison["N/A"]
powerloom_percent = (profit_comparison["Powerloom More Profitable"] / valid_responses) * 100
handloom_percent = (profit_comparison["Handloom More Profitable"] / valid_responses) * 100

# Calculate profit margin distribution
total_handloom_cases = profit_comparison["Handloom More Profitable"]
margin_distribution = {k: (v / total_handloom_cases) * 100 for k, v in profit_ranges.items()}

# Results
print("=== PROFITABILITY COMPARISON ===")
print(f"Powerloom more profitable: {profit_comparison['Powerloom More Profitable']} cases ({powerloom_percent:.1f}%)")
print(f"Handloom more profitable: {profit_comparison['Handloom More Profitable']} cases ({handloom_percent:.1f}%)")
print(f"Missing data: {profit_comparison['N/A']} cases")

print("\n=== HANDLOOM PROFIT MARGIN ADVANTAGE ===")
for range, count in profit_ranges.items():
    print(f"{range} more profitable: {count} cases ({margin_distribution[range]:.1f}%)")

print("\n=== KEY FINDINGS ===")
print(f"1. Powerloom was more profitable in {powerloom_percent:.1f}% of valid cases")
print(f"2. When handloom was more profitable, typically by 10%-20% margin")
print(f"3. Significant profitability differences (>30%) were rare")

# Visualization
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 5))

# Chart 1: Profitability Comparison
plt.subplot(1, 2, 1)
comp_labels = ['Powerloom More Profitable', 'Handloom More Profitable']
comp_values = [profit_comparison['Powerloom More Profitable'], profit_comparison['Handloom More Profitable']]
comp_colors = ['#1f77b4', '#ff7f0e']
bars = plt.bar(comp_labels, comp_values, color=comp_colors)
plt.title('Profitability Comparison')
plt.ylabel('Number of Cases')
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

# Chart 2: Handloom Advantage Margins
plt.subplot(1, 2, 2)
margin_labels = list(profit_ranges.keys())
margin_values = list(profit_ranges.values())
margin_colors = ['#2ca02c', '#98df8a', '#d62728', '#ff9896']
plt.bar(margin_labels, margin_values, color=margin_colors)
plt.title('Handloom Profit Margin Advantage')
plt.ylabel('Number of Cases')
for i, v in enumerate(margin_values):
    plt.text(i, v, f"{v}\n({margin_distribution[margin_labels[i]]:.1f}%)", ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ==================== PRODUCT DEMAND ANALYSIS ====================
data = [
    1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    0, 1, 1, 0, 0, 0, 0, 1, 0, 1,
    1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1
]

# Initialize counters
demand_counts = {
    "Handloom": 0,  # 1
    "Powerloom": 0  # 0
}

# Count responses
for response in data:
    if response == 1:
        demand_counts["Handloom"] += 1
    else:
        demand_counts["Powerloom"] += 1

# Calculate percentages
total_responses = len(data)
handloom_percent = (demand_counts["Handloom"] / total_responses) * 100
powerloom_percent = (demand_counts["Powerloom"] / total_responses) * 100

# Results
print("=== PRODUCT DEMAND COMPARISON ===")
print(f"Handloom products in demand: {demand_counts['Handloom']} cases ({handloom_percent:.1f}%)")
print(f"Powerloom products in demand: {demand_counts['Powerloom']} cases ({powerloom_percent:.1f}%)")

print("\n=== KEY FINDINGS ===")
print(f"1. Handloom products have significantly higher demand (86.2% of cases)")
print(f"2. Powerloom products show demand in only 9 cases (13.8%)")
print(f"3. Demand ratio: Approximately 6:1 in favor of Handloom products")

# Visualization
import matplotlib.pyplot as plt

labels = ['Handloom', 'Powerloom']
values = [demand_counts['Handloom'], demand_counts['Powerloom']]
colors = ['#FFA500', '#4682B4']  # Orange and Steel Blue
explode = (0.1, 0)  # Emphasize Handloom segment

plt.figure(figsize=(8, 6))
plt.pie(values, labels=labels, colors=colors, explode=explode,
        autopct='%1.1f%%', shadow=True, startangle=140)
plt.title('Product Demand Comparison: Handloom vs Powerloom')
plt.axis('equal')  # Equal aspect ratio ensures pie is circular
plt.show()

# ==================== CUSTOMER PREFERENCE ANALYSIS ====================
data = [
    "25%-50%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%", "25%-50%", "25%-50%",
    "0-25%", "0-25%", "0-25%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%",
    "0-25%", "0-25%", "0-25%", "25%-50%", "25%-50%", "0-25%", "25%-50%", "50%-75%",
    "0-25%", "50%-75%", "25%-50%", "25%-50%", 0, 1, "50%-75%", "0%-25%", "N/A",
    "50%-75%", "25%-50%", "25%-50%", "25%-50%", "0%-25%", "50%-75%", "0%-25%", "0%-25%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "25%-50%", "0%-25%", "N/A", "0%-25%", "N/A",
    "N/A", "0%-25%", "N/A", "N/A", "N/A", "0%-25%", "N/A", "0%-25%", "N/A", "50%-75%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "N/A", "25%-50%"
]

# Initialize counters
preference_counts = {
    "0-25%": 0,
    "25-50%": 0,
    "50-75%": 0,
    "75-100%": 0,
    "N/A": 0
}

# Standardize and count responses
for item in data:
    if isinstance(item, int):  # Handle numeric codes
        if item == 0:
            preference_counts["0-25%"] += 1
        elif item == 1:
            preference_counts["25-50%"] += 1
        elif item == 2:
            preference_counts["50-75%"] += 1
        elif item == 3:
            preference_counts["75-100%"] += 1
    elif isinstance(item, str):
        if "N/A" in item:
            preference_counts["N/A"] += 1
        elif "0" in item or "0%" in item:  # All 0-25% variations
            preference_counts["0-25%"] += 1
        elif "25" in item:
            preference_counts["25-50%"] += 1
        elif "50" in item:
            preference_counts["50-75%"] += 1
        elif "75" in item:
            preference_counts["75-100%"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - preference_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in preference_counts.items() if k != "N/A"}

# Results
print("=== CUSTOMER PREFERENCE FOR HANDLOOM PRODUCTS ===")
print(f"0-25% of customers prefer handloom: {preference_counts['0-25%']} cases ({percentages['0-25%']:.1f}%)")
print(f"25-50% of customers prefer handloom: {preference_counts['25-50%']} cases ({percentages['25-50%']:.1f}%)")
print(f"50-75% of customers prefer handloom: {preference_counts['50-75%']} cases ({percentages['50-75%']:.1f}%)")
print(f"75-100% of customers prefer handloom: {preference_counts['75-100%']} cases ({percentages['75-100%']:.1f}%)")
print(f"Missing data: {preference_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Majority of cases (59.6%) show 0-25% customer preference for handloom")
print(f"2. Significant preference (50-75%) appears in 23.1% of cases")
print(f"3. Very strong preference (>75%) is rare (0 cases)")
print(f"4. Moderate preference (25-50%) appears in 17.3% of cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['0-25%', '25-50%', '50-75%', '75-100%']
values = [preference_counts[k] for k in labels]
colors = ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2']

plt.figure(figsize=(10, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Customer Preference for Handloom Products')
plt.xlabel('Percentage of Customers Preferring Handloom')
plt.ylabel('Number of Cases')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== CUSTOMER PREFERENCE ANALYSIS ====================
data = [
    "25%-50%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%", "25%-50%", "25%-50%",
    "0-25%", "0-25%", "0-25%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%",
    "0-25%", "0-25%", "0-25%", "25%-50%", "25%-50%", "0-25%", "25%-50%", "50%-75%",
    "0-25%", "50%-75%", "25%-50%", "25%-50%", 0, 1, "50%-75%", "0%-25%", "N/A",
    "50%-75%", "25%-50%", "25%-50%", "25%-50%", "0%-25%", "50%-75%", "0%-25%", "0%-25%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "25%-50%", "0%-25%", "N/A", "0%-25%", "N/A",
    "N/A", "0%-25%", "N/A", "N/A", "N/A", "0%-25%", "N/A", "0%-25%", "N/A", "50%-75%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "N/A", "25%-50%"
]

# Initialize counters
preference_counts = {
    "0-25%": 0,
    "25-50%": 0,
    "50-75%": 0,
    "75-100%": 0,
    "N/A": 0
}

# Standardize and count responses
for item in data:
    if isinstance(item, int):  # Handle numeric codes
        if item == 0:
            preference_counts["0-25%"] += 1
        elif item == 1:
            preference_counts["25-50%"] += 1
        elif item == 2:
            preference_counts["50-75%"] += 1
        elif item == 3:
            preference_counts["75-100%"] += 1
    elif isinstance(item, str):
        if "N/A" in item:
            preference_counts["N/A"] += 1
        elif "0" in item or "0%" in item:  # All 0-25% variations
            preference_counts["0-25%"] += 1
        elif "25" in item:
            preference_counts["25-50%"] += 1
        elif "50" in item:
            preference_counts["50-75%"] += 1
        elif "75" in item:
            preference_counts["75-100%"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - preference_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in preference_counts.items() if k != "N/A"}

# Results
print("=== CUSTOMER PREFERENCE FOR HANDLOOM PRODUCTS ===")
print(f"0-25% of customers prefer handloom: {preference_counts['0-25%']} cases ({percentages['0-25%']:.1f}%)")
print(f"25-50% of customers prefer handloom: {preference_counts['25-50%']} cases ({percentages['25-50%']:.1f}%)")
print(f"50-75% of customers prefer handloom: {preference_counts['50-75%']} cases ({percentages['50-75%']:.1f}%)")
print(f"75-100% of customers prefer handloom: {preference_counts['75-100%']} cases ({percentages['75-100%']:.1f}%)")
print(f"Missing data: {preference_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Majority of cases (59.6%) show 0-25% customer preference for handloom")
print(f"2. Significant preference (50-75%) appears in 23.1% of cases")
print(f"3. Very strong preference (>75%) is rare (0 cases)")
print(f"4. Moderate preference (25-50%) appears in 17.3% of cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['0-25%', '25-50%', '50-75%', '75-100%']
values = [preference_counts[k] for k in labels]
colors = ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2']

plt.figure(figsize=(10, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Customer Preference for Handloom Products')
plt.xlabel('Percentage of Customers Preferring Handloom')
plt.ylabel('Number of Cases')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== CUSTOMER PREFERENCE ANALYSIS ====================
data = [
    "25%-50%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%", "25%-50%", "25%-50%",
    "0-25%", "0-25%", "0-25%", "0-25%", "0-25%", "50%-75%", "0-25%", "0-25%",
    "0-25%", "0-25%", "0-25%", "25%-50%", "25%-50%", "0-25%", "25%-50%", "50%-75%",
    "0-25%", "50%-75%", "25%-50%", "25%-50%", 0, 1, "50%-75%", "0%-25%", "N/A",
    "50%-75%", "25%-50%", "25%-50%", "25%-50%", "0%-25%", "50%-75%", "0%-25%", "0%-25%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "25%-50%", "0%-25%", "N/A", "0%-25%", "N/A",
    "N/A", "0%-25%", "N/A", "N/A", "N/A", "0%-25%", "N/A", "0%-25%", "N/A", "50%-75%",
    "0%-25%", "0%-25%", "0%-25%", "0%-25%", "N/A", "25%-50%"
]

# Initialize counters
preference_counts = {
    "0-25%": 0,
    "25-50%": 0,
    "50-75%": 0,
    "75-100%": 0,
    "N/A": 0
}

# Standardize and count responses
for item in data:
    if isinstance(item, int):  # Handle numeric codes
        if item == 0:
            preference_counts["0-25%"] += 1
        elif item == 1:
            preference_counts["25-50%"] += 1
        elif item == 2:
            preference_counts["50-75%"] += 1
        elif item == 3:
            preference_counts["75-100%"] += 1
    elif isinstance(item, str):
        if "N/A" in item:
            preference_counts["N/A"] += 1
        elif "0" in item or "0%" in item:  # All 0-25% variations
            preference_counts["0-25%"] += 1
        elif "25" in item:
            preference_counts["25-50%"] += 1
        elif "50" in item:
            preference_counts["50-75%"] += 1
        elif "75" in item:
            preference_counts["75-100%"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - preference_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in preference_counts.items() if k != "N/A"}

# Results
print("=== CUSTOMER PREFERENCE FOR HANDLOOM PRODUCTS ===")
print(f"0-25% of customers prefer handloom: {preference_counts['0-25%']} cases ({percentages['0-25%']:.1f}%)")
print(f"25-50% of customers prefer handloom: {preference_counts['25-50%']} cases ({percentages['25-50%']:.1f}%)")
print(f"50-75% of customers prefer handloom: {preference_counts['50-75%']} cases ({percentages['50-75%']:.1f}%)")
print(f"75-100% of customers prefer handloom: {preference_counts['75-100%']} cases ({percentages['75-100%']:.1f}%)")
print(f"Missing data: {preference_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Majority of cases (59.6%) show 0-25% customer preference for handloom")
print(f"2. Significant preference (50-75%) appears in 23.1% of cases")
print(f"3. Very strong preference (>75%) is rare (0 cases)")
print(f"4. Moderate preference (25-50%) appears in 17.3% of cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['0-25%', '25-50%', '50-75%', '75-100%']
values = [preference_counts[k] for k in labels]
colors = ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2']

plt.figure(figsize=(10, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Customer Preference for Handloom Products')
plt.xlabel('Percentage of Customers Preferring Handloom')
plt.ylabel('Number of Cases')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== CUSTOMER PREFERENCE ANALYSIS ====================
data = [
    "75%-100%", "25%-75%", "50%-75%", "50%-75%", "50%-75%", "50%-75%", "0-25%", "50%-75%",
    "50%-75%", "50%-75%", "75%-100%", "25%-75%", "50%-75%", "0-25%", "50%-75%", "50%-75%",
    "50%-75%", "50%-75%", "50%-75%", "50%-75%", "50%-75%", "25%-50%", "50%-75%", "0-25%",
    "50%-75%", "75%-100%", "50%-75%", "50%-75%", "75%-100%", "75%-100%", "0-25%", "75%-100%",
    "50%-75%", "25%-50%", "25%-50%", "N/A", "25%-50%", "0%-25%", "25%-50%", "0%-25%",
    "50%-75%", "50%-75%", "50%-75%", "50%-75%", "50%-75%", "50%-75%", "75%-100%", "75%-100%",
    "75%-100%", "N/A", "75%-100%", "50%-75%", "75%-100%", "75%-100%", "75%-100%", "50%-75%",
    "25%-50%", "75%-100%", "50%-75%", "25%-50%", "50%-75%", "25%-50%", "25%-50%", "50%-75%",
    "50%-75%", "25%-50%"
]

# Initialize counters
preference_counts = {
    "0-25%": 0,
    "25-50%": 0,
    "50-75%": 0,
    "75-100%": 0,
    "N/A": 0
}

# Standardize and count responses
for item in data:
    if isinstance(item, str):
        if "N/A" in item:
            preference_counts["N/A"] += 1
        elif "0" in item or "0%" in item:
            preference_counts["0-25%"] += 1
        elif "25-50" in item or "25%-50" in item:
            preference_counts["25-50%"] += 1
        elif "25-75" in item:  # Split 25-75% range evenly
            preference_counts["25-50%"] += 0.5
            preference_counts["50-75%"] += 0.5
        elif "50-75" in item or "50%-75" in item:
            preference_counts["50-75%"] += 1
        elif "75-100" in item or "75%-100" in item:
            preference_counts["75-100%"] += 1

# Convert split counts to integers
preference_counts["25-50%"] = round(preference_counts["25-50%"])
preference_counts["50-75%"] = round(preference_counts["50-75%"])

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - preference_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in preference_counts.items() if k != "N/A"}

# Results
print("=== CUSTOMER PREFERENCE FOR HANDLOOM PRODUCTS ===")
print(f"0-25% of customers prefer handloom: {preference_counts['0-25%']} cases ({percentages['0-25%']:.1f}%)")
print(f"25-50% of customers prefer handloom: {preference_counts['25-50%']} cases ({percentages['25-50%']:.1f}%)")
print(f"50-75% of customers prefer handloom: {preference_counts['50-75%']} cases ({percentages['50-75%']:.1f}%)")
print(f"75-100% of customers prefer handloom: {preference_counts['75-100%']} cases ({percentages['75-100%']:.1f}%)")
print(f"Missing data: {preference_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Strong preference (75-100%): {preference_counts['75-100%']} cases ({percentages['75-100%']:.1f}%)")
print(f"2. Majority preference (50-75%): {preference_counts['50-75%']} cases ({percentages['50-75%']:.1f}%)")
print(f"3. Combined strong/majority preference (50-100%): {preference_counts['50-75%'] + preference_counts['75-100%']} cases ({(percentages['50-75%'] + percentages['75-100%']):.1f}%)")
print(f"4. Limited preference (<25%): Only {preference_counts['0-25%']} cases")

# Visualization
import matplotlib.pyplot as plt

labels = ['0-25%', '25-50%', '50-75%', '75-100%']
values = [preference_counts[k] for k in labels]
colors = ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2']

plt.figure(figsize=(10, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Customer Preference for Handloom Products')
plt.xlabel('Percentage of Customers Preferring Handloom')
plt.ylabel('Number of Cases')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== TECHNOLOGY IMPACT ANALYSIS ====================
data = [
    0, 0, 0, 0, 2, 0, 0, 1, 0, 0,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 1, 0, "N/A", "N/A", 1, 2, 0,
    0, 0, "N/A", 0, 0, 0, 0, 0, 0, 2,
    0, 0, 1, 0, 2, 1, 1, 0, 1, 1,
    1, 0, 0, 1, 1, 0, 0, 1, 1, 0,
    0, 0, 1, 2, 0, 0
]

# Initialize counters
response_counts = {
    "Yes - Reduced importance": 0,    # 0
    "No - Maintained importance": 0,  # 1
    "Not sure": 0,                    # 2
    "N/A": 0
}

# Count responses
for response in data:
    if response == 0:
        response_counts["Yes - Reduced importance"] += 1
    elif response == 1:
        response_counts["No - Maintained importance"] += 1
    elif response == 2:
        response_counts["Not sure"] += 1
    else:
        response_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - response_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in response_counts.items() if k != "N/A"}

# Results
print("=== IMPACT OF TECHNOLOGY ON TRADITIONAL WEAVING ===")
print(f"Believe technology reduced importance: {response_counts['Yes - Reduced importance']} cases ({percentages['Yes - Reduced importance']:.1f}%)")
print(f"Believe importance maintained: {response_counts['No - Maintained importance']} cases ({percentages['No - Maintained importance']:.1f}%)")
print(f"Uncertain about impact: {response_counts['Not sure']} cases ({percentages['Not sure']:.1f}%)")
print(f"Missing data: {response_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Majority ({response_counts['No - Maintained importance']} cases, {percentages['No - Maintained importance']:.1f}%) believe traditional weaving maintains importance")
print(f"2. Significant minority ({response_counts['Yes - Reduced importance']} cases, {percentages['Yes - Reduced importance']:.1f}%) see reduced importance")
print(f"3. {response_counts['Not sure']} respondents were uncertain about the impact")

# Visualization
import matplotlib.pyplot as plt

labels = ['Reduced Importance', 'Maintained Importance', 'Not Sure']
values = [response_counts['Yes - Reduced importance'], 
          response_counts['No - Maintained importance'],
          response_counts['Not sure']]
colors = ['#FF6B6B', '#06D6A0', '#FFD166']

plt.figure(figsize=(8, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Perceived Impact of Technology on Traditional Weaving')
plt.ylabel('Number of Respondents')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== YOUNGER GENERATION TECHNOLOGY PREFERENCE ANALYSIS ====================
data = [
    0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 2, "N/A", "N/A", 1, 2, 0, 0,
    0, 0, 2, 1, 0, 1, 1, 0, 0, 0,
    1, 0, 0, 2, 0, 0, 0, 1, 1, 2,
    0, 0, 0, 2, 1, 0, 0, 2, 1, 0,
    0, 0, 0, 0, 0
]

# Initialize counters
response_counts = {
    "Yes - Prefer Modern": 0,    # 0
    "No - Prefer Traditional": 0,  # 1
    "Not Sure": 0,                # 2
    "N/A": 0
}

# Count responses
for response in data:
    if response == 0:
        response_counts["Yes - Prefer Modern"] += 1
    elif response == 1:
        response_counts["No - Prefer Traditional"] += 1
    elif response == 2:
        response_counts["Not Sure"] += 1
    else:
        response_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - response_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in response_counts.items() if k != "N/A"}

# Results
print("=== YOUNGER GENERATION TECHNOLOGY PREFERENCE ===")
print(f"Prefer modern technology: {response_counts['Yes - Prefer Modern']} cases ({percentages['Yes - Prefer Modern']:.1f}%)")
print(f"Prefer traditional methods: {response_counts['No - Prefer Traditional']} cases ({percentages['No - Prefer Traditional']:.1f}%)")
print(f"Uncertain: {response_counts['Not Sure']} cases ({percentages['Not Sure']:.1f}%)")
print(f"Missing data: {response_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Strong majority ({response_counts['Yes - Prefer Modern']} cases, {percentages['Yes - Prefer Modern']:.1f}%) believe younger weavers prefer modern technology")
print(f"2. Only {response_counts['No - Prefer Traditional']} cases ({percentages['No - Prefer Traditional']:.1f}%) see younger weavers sticking with traditional methods")
print(f"3. {response_counts['Not Sure']} respondents ({percentages['Not Sure']:.1f}%) were uncertain about preferences")

# Visualization
import matplotlib.pyplot as plt

labels = ['Prefer Modern', 'Prefer Traditional', 'Not Sure']
values = [response_counts['Yes - Prefer Modern'], 
          response_counts['No - Prefer Traditional'],
          response_counts['Not Sure']]
colors = ['#1f77b4', '#ff7f0e', '#2ca02c']

plt.figure(figsize=(8, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Younger Generation Weaving Technology Preferences')
plt.ylabel('Number of Respondents')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

# ==================== TRADITIONAL WEAVING PRESERVATION ANALYSIS ====================
data = [
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, "N/A", "N/A", 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
    2, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    2, 0, 0, 0, 0, 0
]

# Initialize counters
response_counts = {
    "Yes - Necessary": 0,    # 0
    "No - Not Necessary": 0, # 1
    "Not Sure": 0,           # 2
    "N/A": 0
}

# Count responses
for response in data:
    if response == 0:
        response_counts["Yes - Necessary"] += 1
    elif response == 1:
        response_counts["No - Not Necessary"] += 1
    elif response == 2:
        response_counts["Not Sure"] += 1
    else:
        response_counts["N/A"] += 1

# Calculate percentages
total_responses = len(data)
valid_responses = total_responses - response_counts["N/A"]
percentages = {k: (v / valid_responses) * 100 for k, v in response_counts.items() if k != "N/A"}

# Results
print("=== TRADITIONAL WEAVING PRESERVATION NEED ===")
print(f"Believe preservation is necessary: {response_counts['Yes - Necessary']} cases ({percentages['Yes - Necessary']:.1f}%)")
print(f"Believe preservation is not necessary: {response_counts['No - Not Necessary']} cases ({percentages['No - Not Necessary']:.1f}%)")
print(f"Uncertain: {response_counts['Not Sure']} cases ({percentages['Not Sure']:.1f}%)")
print(f"Missing data: {response_counts['N/A']} cases")

print("\n=== KEY FINDINGS ===")
print(f"1. Overwhelming majority ({response_counts['Yes - Necessary']} cases, {percentages['Yes - Necessary']:.1f}%) support preserving traditional methods")
print(f"2. Only {response_counts['No - Not Necessary']} cases ({percentages['No - Not Necessary']:.1f}%) believe preservation isn't necessary")
print(f"3. Small minority ({response_counts['Not Sure']} cases, {percentages['Not Sure']:.1f}%) are uncertain")

# Visualization
import matplotlib.pyplot as plt

labels = ['Necessary', 'Not Necessary', 'Not Sure']
values = [response_counts['Yes - Necessary'], 
          response_counts['No - Not Necessary'],
          response_counts['Not Sure']]
colors = ['#4CAF50', '#F44336', '#FFC107']

plt.figure(figsize=(8, 6))
bars = plt.bar(labels, values, color=colors)
plt.title('Need to Preserve Traditional Weaving Methods')
plt.ylabel('Number of Respondents')

# Add value labels
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
            f'{height}\n({height/valid_responses*100:.1f}%)',
            ha='center', va='bottom')

plt.show()

