import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict

# ==================== DATA ANALYSIS SCRIPT ====================

def analyze_and_plot(data, column_name, labels, title):
    """Helper function to analyze and plot categorical data"""
    df = pd.DataFrame(data, columns=[column_name])
    df[column_name] = df[column_name].map(labels)
    
    counts = df[column_name].value_counts()
    percentages = (df[column_name].value_counts(normalize=True) * 100).round(1)
    
    # Create summary DataFrame
    summary = pd.DataFrame({
        'Count': counts,
        'Percentage': percentages
    }).sort_index()
    
    # Plotting
    plt.figure(figsize=(10, 5))
    bars = plt.bar(summary.index, summary['Count'], color='skyblue')
    plt.title(f'{title} Distribution')
    plt.xlabel(title)
    plt.ylabel('Count')
    
    # Add percentage labels
    for bar in bars:
        height = bar.get_height()
        percentage = summary.loc[bar.get_label(), 'Percentage']
        plt.text(bar.get_x() + bar.get_width()/2, height, 
                f'{height}\n({percentage}%)', 
                ha='center', va='bottom')
    
    plt.xticks(rotation=45 if len(summary) > 2 else 0)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.show()
    
    return summary

# ==================== AGE DISTRIBUTION ====================
print("\n" + "="*40 + " AGE ANALYSIS " + "="*40)
ages = [
    50, 55, 76, 57, 53, 93, 50, 29, 31, 52, 50, 80, 37, 55, 40, 56, 
    46, 42, 40, 48, 25, 45, 35, 50, 31, 45, 51, 40, 36, 55, 30, 40, 
    40, 44, 44, 28, 48, 40, 39, 38, 55, 36, 55, 60, 30, 40, 48, 35, 
    38, 35, 50, 39, 40, 32, 46, 57, 32, 50, 48, 45, 53, 54, 56, 50, 
    43, 45
]

age_df = pd.DataFrame(ages, columns=['Age'])
bins = [20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90+']
age_df['Age_Group'] = pd.cut(age_df['Age'], bins=bins, labels=labels, right=False)

age_counts = age_df['Age_Group'].value_counts().sort_index()
age_percent = (age_df['Age_Group'].value_counts(normalize=True) * 100

age_summary = pd.DataFrame({
    'Age Group': age_counts.index,
    'Count': age_counts.values,
    'Percentage': age_percent.round(1).values
})

print("\nAge Distribution Summary:")
print(age_summary.to_string(index=False))

# ==================== GENDER DISTRIBUTION ====================
print("\n" + "="*40 + " GENDER ANALYSIS " + "="*40)
gender_data = [
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,
    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 0, 1, 1, 1, 1
]
gender_labels = {0: 'Male', 1: 'Female'}
gender_summary = analyze_and_plot(gender_data, 'Gender', gender_labels, 'Gender')

# ==================== CASTE DISTRIBUTION ====================
print("\n" + "="*40 + " CASTE ANALYSIS " + "="*40)
caste_data = [
    0,3,1,1,0,1,0,3,0,1,0,1,0,3,3,0,0,0,0,3,3,3,3,1,1,0,3,1,3,1,1,1,
    0,1,0,0,3,3,3,3,0,3,1,1,3,3,3,2,0,0,0,1,0,0,0,0,1,2,1,1,0,1,1,1,0,0
]
caste_labels = {0: "General", 1: "SC", 2: "ST", 3: "OBC"}
caste_summary = analyze_and_plot(caste_data, 'Caste', caste_labels, 'Caste')

# ==================== MARITAL STATUS ====================
print("\n" + "="*40 + " MARITAL STATUS ANALYSIS " + "="*40)
marital_data = [
    1,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1
]
marital_labels = {0: 'Single', 1: 'Married', 2: 'Divorced', 3: 'Widowed'}
marital_summary = analyze_and_plot(marital_data, 'Marital Status', marital_labels, 'Marital Status')

# ==================== FAMILY TYPE ====================
print("\n" + "="*40 + " FAMILY TYPE ANALYSIS " + "="*40)
family_data = [
    1,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,
    1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1
]
family_labels = {0: 'Joint Family', 1: 'Nuclear Family'}
family_summary = analyze_and_plot(family_data, 'Family Type', family_labels, 'Family Type')

# ==================== PRIMARY LANGUAGE ====================
print("\n" + "="*40 + " LANGUAGE ANALYSIS " + "="*40)
language_data = [
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
]
language_labels = {0: 'Hindi', 1: 'English', 2: 'Assamese', 3: 'Others (Bengali)'}
language_summary = analyze_and_plot(language_data, 'Language', language_labels, 'Primary Language')

# ==================== AMENITIES ANALYSIS ====================
print("\n" + "="*40 + " AMENITIES ANALYSIS " + "="*40)
amenities_data = [
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3],
    [0,1,3], [0,1,2], [0,1,2], [0,1,2], [0,1,2,3],
    [0,1], [0,1,2,3], [0,1,3], [0], [0,1,2,3],
    [0,1,2,3], [0], [0,1,3], [0,1,2], [0,2],
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,3],
    [0,3], [0,3], [0,1], [0,1,2], [0,1,2,3],
    [0], [0], [0], [1], [1], [1]
]

amenities_map = {0: 'Electricity', 1: 'Clean Water', 2: 'Sanitation', 3: 'Internet'}
amenities_df = pd.DataFrame(columns=amenities_map.values())

for household in amenities_data:
    row = {amenities_map[code]: 1 for code in household}
    amenities_df = amenities_df.append(row, ignore_index=True)

amenities_df = amenities_df.fillna(0)
availability = amenities_df.sum().sort_values(ascending=False)
percentage = (availability / len(amenities_df) * 100

amenities_summary = pd.DataFrame({
    'Amenity': availability.index,
    'Households': availability.values,
    'Percentage': percentage.round(1).values
})

print("\nAmenities Availability Summary:")
print(amenities_summary.to_string(index=False))

plt.figure(figsize=(10, 5))
bars = plt.bar(amenities_summary['Amenity'], amenities_summary['Percentage'], 
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
plt.title('Household Amenities Availability (%)')
plt.ylabel('Percentage of Households')
plt.ylim(0, 100)

for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height, f'{height:.1f}%', 
             ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.tight_layout()
plt.show()

plt.style.use('seaborn')
plt.rcParams['figure.facecolor'] = 'white'

# ==================== HOUSE TYPE ANALYSIS ====================
house_type = [
    0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
    1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 0
]

house_df = pd.DataFrame(house_type, columns=['HouseType'])
house_df['HouseType'] = house_df['HouseType'].map({0: 'Pakka', 1: 'Kacha'})
house_counts = house_df['HouseType'].value_counts()
house_perc = (house_df['HouseType'].value_counts(normalize=True) * 100

plt.figure(figsize=(8, 5))
bars = plt.bar(house_counts.index, house_counts.values, color=['#4e79a7', '#f28e2b'])
plt.title('House Type Distribution', fontsize=14)
plt.xlabel('Type of House', fontsize=12)
plt.ylabel('Number of Households', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = house_perc[bar.get_label()]
    plt.text(bar.get_x() + bar.get_width()/2, height, 
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

# ==================== AMENITIES ANALYSIS ====================
amenities_data = [
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3],
    [0,1,3], [0,1,2], [0,1,2], [0,1,2], [0,1,2,3],
    [0,1], [0,1,2,3], [0,1,3], [0], [0,1,2,3],
    [0,1,2,3], [0], [0,1,3], [0,1,2], [0,2],
    [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,3],
    [0,3], [0,3], [0,1], [0,1,2], [0,1,2,3],
    [0], [0], [0], [1], [1], [1]
]

amenities_df = pd.DataFrame(columns=['Electricity', 'Clean Water', 'Sanitation Facility', 'Internet Access'])
for household in amenities_data:
    row = {
        'Electricity': 1 if 0 in household else 0,
        'Clean Water': 1 if 1 in household else 0,
        'Sanitation Facility': 1 if 2 in household else 0,
        'Internet Access': 1 if 3 in household else 0
    }
    amenities_df = amenities_df.append(row, ignore_index=True)

amenities_summary = amenities_df.sum().sort_values(ascending=False)
amenities_perc = (amenities_summary / len(amenities_df) * 100

plt.figure(figsize=(10, 5))
bars = plt.bar(amenities_summary.index, amenities_perc.values,
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
plt.title('Household Amenities Availability', fontsize=14)
plt.xlabel('Amenity Type', fontsize=12)
plt.ylabel('Percentage of Households (%)', fontsize=12)
plt.ylim(0, 100)

for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
             f'{bar.get_height():.1f}%', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ==================== OCCUPATION ANALYSIS ====================
occupation_data = [
    3, [1,3], 1, 1, 1, [1,3], 3, 1, 1, 1,
    1, 3, 1, 1, 1, 1, 1, "5(Service)", "5(Service)", 3,
    1, 5, 1, 1, 5, 5, 3, 1, 1, "5(Service)",
    1, 1, 1, 1, 1, "5(Service)", 1, 1, 3, 3,
    3, 3, 3, 1, 3, 1, 1, 1, 1, "5(Service)",
    "5(Service)", 1, "5(Service)", 3, 1, "5(Service)", 3, 1, 1,
    3, 1, 1, 3, 1, 1, 1
]

occupation_counts = defaultdict(int)
for entry in occupation_data:
    if isinstance(entry, list):
        codes = entry
    else:
        codes = [5 if isinstance(entry, str) else entry]
    for code in codes:
        occupation_counts[code] += 1

occupation_labels = {
    0: 'Unemployed', 1: 'Self-Employed', 2: 'Farmer',
    3: 'Small Business Owner', 4: 'Government Employee', 5: 'Other'
}

occupation_summary = pd.DataFrame([
    {'Occupation': occupation_labels[code], 'Count': count, 
     'Percentage': (count/len(occupation_data))*100}
    for code, count in occupation_counts.items()
]).sort_values('Count', ascending=False)

plt.figure(figsize=(10, 5))
bars = plt.bar(occupation_summary['Occupation'], occupation_summary['Count'],
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'])
plt.title('Occupation Distribution', fontsize=14)
plt.xlabel('Occupation Type', fontsize=12)
plt.ylabel('Number of Respondents', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = occupation_summary[occupation_summary['Occupation'] == bar.get_label()]['Percentage'].values[0]
    plt.text(bar.get_x() + bar.get_width()/2, height,
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.2)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ==================== EDUCATION ANALYSIS ====================
education_data = [
    2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
    2, 2, 0, 2, 3, 2, 1, 1, 1, 2,
    2, 3, 2, 2, 1, 2, 2, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 1, 1, 2, 2,
    1, 2, 2, 2, 1, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 1, 0, 1,
    2, 1, 0, 0, 2, 2
]

education_df = pd.DataFrame(education_data, columns=['Education'])
education_df['Education'] = education_df['Education'].map({
    0: 'No Formal Education', 1: 'Primary', 
    2: 'High School', 3: 'Graduate', 4: 'Others'
})

education_counts = education_df['Education'].value_counts()
education_perc = (education_df['Education'].value_counts(normalize=True) * 100)

plt.figure(figsize=(10, 5))
bars = plt.bar(education_counts.index, education_counts.values,
               color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])
plt.title('Education Qualification Distribution', fontsize=14)
plt.xlabel('Education Level', fontsize=12)
plt.ylabel('Number of Respondents', fontsize=12)

for bar in bars:
    height = bar.get_height()
    perc = education_perc[bar.get_label()]
    plt.text(bar.get_x() + bar.get_width()/2, height,
             f'{height}\n({perc:.1f}%)', ha='center', va='bottom')

plt.grid(axis='y', alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Print all summaries
print("\n=== HOUSE TYPE SUMMARY ===")
print(pd.DataFrame({
    'House Type': house_counts.index,
    'Count': house_counts.values,
    'Percentage': house_perc.round(1).values
}).to_string(index=False))

print("\n=== AMENITIES SUMMARY ===")
print(pd.DataFrame({
    'Amenity': amenities_summary.index,
    'Households': amenities_summary.values,
    'Percentage (%)': amenities_perc.round(1).values
}).to_string(index=False))

print("\n=== OCCUPATION SUMMARY ===")
print(occupation_summary[['Occupation', 'Count', 'Percentage']]
      .rename(columns={'Percentage': 'Percentage (%)'})
      .round(1).to_string(index=False))

print("\n=== EDUCATION SUMMARY ===")
print(pd.DataFrame({
    'Education Level': education_counts.index,
    'Count': education_counts.values,
    'Percentage (%)': education_perc.round(1).values
}).to_string(index=False))


plt.style.use('seaborn')
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

# ==================== WEAVING EXPERIENCE ANALYSIS ====================
experience_data = [
    2, 1, 3, 3, 2, 2, 3, 0, 3, 3, 3, 3, 1, 3, 3, 3, 2, 1, 1, 2,
    3, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 0, 2, 2, 3, 1, 1, 1, 1, 2,
    0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 0, 3, 1, 3, 3, 1, 2, 1, 3,
    1, 3, 3, 3, 3, 3
]

exp_df = pd.DataFrame(experience_data, columns=['Experience'])
exp_df['Category'] = exp_df['Experience'].map({
    0: 'Less than 5 years',
    1: '5-10 years',
    2: '10-15 years', 
    3: 'More than 15 years'
})

exp_counts = exp_df['Category'].value_counts()
exp_perc = (exp_df['Category'].value_counts(normalize=True) * 100).round(1)

plt.figure(figsize=(10, 5))
bars = plt.bar(exp_counts.index, exp_counts.values, color=['#1f77b4','#ff7f0e','#2ca02c','#d62728'])
plt.title('Weaving Industry Experience', fontsize=14)
plt.xlabel('Experience Category', fontsize=12)
plt.ylabel('Number of Weavers', fontsize=12)

for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height, 
             f'{height}\n({exp_perc[bar.get_label()]}%)',
             ha='center', va='bottom')

plt.tight_layout()
plt.show()

# ==================== MARKETING METHODS ANALYSIS ==================== 
marketing_data = [
    1, 2, 3, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 3, 1, 1, 1, 1, 1, 0, 
    2, 1, 1, 0, 1, 1, 0, 3, 1, 1, 1, 0, 0, 1, 1, 3, 3, 3, 3, 1, 
    3, 1, 1, 1, 1, 0, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 1, 0, 1, 3, 
    1, 1, 0, 1, 1, 1, 2, 0, 1
]

market_df = pd.DataFrame(marketing_data, columns=['Method'])
market_df['Method_Name'] = market_df['Method'].map({
    0: "Direct Sales",
    1: "Middlemen", 
    2: "Online Platform",
    3: "Wholesale Contact"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
market_df['Method_Name'].value_counts().plot(kind='bar', color='skyblue')
plt.title('Marketing Methods Distribution')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
market_df['Method_Name'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                           colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Product Marketing/Distribution Methods', y=1.05)
plt.tight_layout()
plt.show()

# ==================== SALES PROBLEMS ANALYSIS ====================
problem_data = [
    0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1,
    0, 1, 1, 0, 1, 0, 1, 1, 0, 1
]

prob_df = pd.DataFrame(problem_data, columns=['Problem'])
prob_df['Response'] = prob_df['Problem'].map({
    0: "Faced Problems",
    1: "No Problems"
})

plt.figure(figsize=(10, 4))
prob_df['Response'].value_counts().plot(kind='bar', color=['#ff7f0e','#1f77b4'])
plt.title('Problems Faced While Selling Products')
plt.xlabel('Response')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# ==================== RAW MATERIALS ANALYSIS ====================
materials_data = [
    1, [0,1], 1, 2, 3, 2, 2, 0, 1, 1, 2, [1,2], 1, 1, 1, 1, 3, 1, 1, 1, 
    3, 1, 1, 3, 3, [0,1,2,3], 3, [2,3], 1, [0,1], 3, 0, 1, 1, 2, 2, 2, 
    [0,1], 0, 1, 1, 1, 1, 0, 2, 3, 0, 1, 3, 3, 3, 2, 3, 1, 3, 0, 1, 0, 
    2, 1, 1, 1, 1, 3, 0, 3
]

flat_materials = []
for entry in materials_data:
    if isinstance(entry, list):
        flat_materials.extend(entry)
    else:
        flat_materials.append(entry)

mat_df = pd.DataFrame(flat_materials, columns=['Material'])
mat_df['Type'] = mat_df['Material'].map({
    0: "Cotton",
    1: "Silk",
    2: "Muga",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
mat_df['Type'].value_counts().plot(kind='bar', color='coral')
plt.title('Raw Materials Used')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
mat_df['Type'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                 colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Primary Raw Materials in Weaving', y=1.05)
plt.tight_layout()
plt.show()

# ==================== PURCHASE SOURCES ANALYSIS ====================
purchase_data = [
    0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 1, [2,3], 0, [0,3], 1, 0, 1, 1, [0,1], 1,
    0, 1, 0, 0, 3, 2, 1, 2, 1, 0, 0, 0, 0, 2, 2, 2, 1, [0,1], 1, 1, 1, 1, 1,
    0, 0, 0, 0, 1, 2, 1, 1, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0
]

flat_purchase = []
for entry in purchase_data:
    if isinstance(entry, list):
        flat_purchase.extend(entry)
    else:
        flat_purchase.append(entry)

pur_df = pd.DataFrame(flat_purchase, columns=['Source'])
pur_df['Location'] = pur_df['Source'].map({
    0: "Local Suppliers",
    1: "Within Assam", 
    2: "Outside Assam",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
pur_df['Location'].value_counts().plot(kind='bar', color='plum')
plt.title('Raw Material Purchase Sources')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
pur_df['Location'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                     colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Where Raw Materials Are Purchased From', y=1.05)
plt.tight_layout()
plt.show()

# ==================== PURCHASE FACTORS ANALYSIS ====================
factors_data = [
    1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, [1,2], 0, 0, 1, 0, [0,1], 1,
    [0,1], 1, 1, 2, 2, 1, 2, 1, 1, [0,1], 0, 1, 0, 1, 1, [2,3], 1, [1,2], 1,
    1, 1, 2, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 2, 2, 2
]

flat_factors = []
for entry in factors_data:
    if isinstance(entry, list):
        flat_factors.extend(entry)
    else:
        flat_factors.append(entry)

factor_df = pd.DataFrame(flat_factors, columns=['Factor'])
factor_df['Type'] = factor_df['Factor'].map({
    0: "Cost",
    1: "Quality",
    2: "Availability",
    3: "Others"
})

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
factor_df['Type'].value_counts().plot(kind='bar', color='teal')
plt.title('Factors Influencing Material Choice')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
factor_df['Type'].value_counts().plot(kind='pie', autopct='%1.1f%%',
                                    colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
plt.ylabel('')
plt.suptitle('Factors Affecting Raw Material Purchase', y=1.05)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# ==================== TECHNOLOGY ADOPTION ANALYSIS ====================
adoption_data = [
    (0, "50%-75%"), (1, ""), (0, "0%-25%"), (0, ""), (1, ""), (1, ""),
    (0, "25%-50%"), (0, "25%-50%"), (0, "25%-50%"), (1, ""), (1, ""),
    (0, "25%-50%"), (1, ""), (0, "25%-50%"), (0, "0%-25%"), (0, "0%-25%"),
    (0, "0%-25%"), (0, "0%-25%"), (1, ""), (1, ""), (1, ""), (1, ""),
    (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""),
    (0, "0%-25%"), (0, "0%-25%"), (0, "25%-50%"), (1, ""), (0, "0%-25%"),
    (0, "25%-50%"), (0, "25%-50%"), (0, "0%-25%"), (0, "75%-100%"), (0, "50%-75%"),
    (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "75%-100%"), (0, "0%-25%"),
    (1, ""), (1, ""), (1, ""), (0, "75%-100%"), (1, ""), (0, "0%-25%"),
    (1, ""), (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "0%-25%"), (0, "0%-25%"),
    (0, "25%-50%"), (1, ""), (0, "0%-25%"), (0, "25%-50%"), (0, "50%-75%"), (0, "0%-25%")
]

df = pd.DataFrame(adoption_data, columns=['Adoption', 'Level'])
adoption_counts = df['Adoption'].value_counts()
level_counts = df[df['Adoption'] == 0]['Level'].value_counts()

print("\nAdoption Summary:")
print(f"Adopted: {adoption_counts[0]} weavers")
print(f"Not Adopted: {adoption_counts[1]} weavers")
print("\nAdoption Levels:")
print(level_counts)

# ==================== COST CHANGE ANALYSIS ====================
cost_data = [
    (0, "increase 10%-20%"), (1, ""), (1, ""), (0, "increase 0%-10%"),
    (0, "increase 10%-20%"), (0, "increase 0%-10%"), (0, "increase 10%-20%"), (1, ""),
    (0, "decrease 0%-10%"), (0, "increase 0%-10%"), (1, ""), (0, "decrease 0%-10%"),
    (0, "increase 0%-10%"), (0, "increase 0%-10%"), (0, "increase 0%-10%"), (0, "increase 0%-10%"), (1, ""),
    (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""), (1, ""),
    (0, "increase 0%-10%"), (1, ""), (1, ""), (0, "increase 0%-10%"), (0, "decrease 0%-10%"), (0, "decrease 0%-10%"), (1, ""),
    (0, "increase 0%-10%"), (0, "increase by 10-20%"), (0, "increase by 10%-20%"), (0, "increase by 10%- 20%"), (1, ""),
    (0, "increase by 0% - 10%"), (1, ""), (0, "increase by 0%- 10%"), (0, "decrease by 0% - 10%"), (1, ""),
    (0, "increase by 0% - 10%"), (1, ""), (1, ""), (1, ""), (0, "increase by 10% - 20%"), (1, ""),
    (0, "increase by 0 - 10%"), (1, ""), (1, ""), (0, "increase by 10%-20%"), (0, "increase by 0% - 10%"),
    (0, "increase by 10%- 20%"), (0, "decrease by 10% - 20%"), (0, "decrease by 10% - 20%"), (1, ""),
    (0, "decrease by 10% - 20%"), (0, "increase by 10%- 20%"), (0, "increase by 0%-10%"), (0, "decrease by 0-10%")
]

df = pd.DataFrame(cost_data, columns=['Response', 'Change'])
df['Change'] = df['Change'].str.lower().str.strip()
df['Change'] = df['Change'].str.replace('by ', '').str.replace(' ', '')

adopters = df[df['Response'] == 0]
change_counts = adopters['Change'].value_counts()
change_percent = (change_counts / len(adopters) * 100)

print("\nCost Changes Among Adopters:")
print(change_counts)
print("\nPercentage Distribution:")
print(change_percent.round(1))

# ==================== PRODUCTION CHANGE ANALYSIS ====================
production_data = [
    1, "N/A", 3, 2, 3, 3, 3, 3, 3, 0, 3, "N/A", 2, 2, 3, 3, 3, 3, 2, "N/A",
    "N/A", 3, 2, 2, 2, 2, "N/A", 2, 2, "N/A", "N/A", "N/A", "N/A", "N/A", 2,
    2, 2, 2, 3, 3, 3, 2, 3, "N/A", 3, 3, 2, 3, "N/A", "N/A", "N/A", 3, "N/A",
    3, "N/A", "N/A", 3, 3, 3, 3, 0, "N/A", 3, 2, 0, 0
]

df = pd.DataFrame(production_data, columns=['Response'])
df['Response'] = pd.to_numeric(df['Response'], errors='coerce')
valid_responses = df.dropna()
response_counts = valid_responses['Response'].value_counts().sort_index()
percentages = (response_counts / len(valid_responses)) * 100

categories = {
    0: "Decreased by 0-10%",
    1: "Decreased by 11-20%",
    2: "No significant change",
    3: "Increased significantly"
}

print("\nProduction Cost Changes:")
for code, count in response_counts.items():
    print(f"{categories[code]}: {count} weavers ({percentages[code]:.1f}%)")

plt.figure(figsize=(10, 6))
response_counts.plot(kind='bar', color=['green', 'lightgreen', 'gray', 'red'])
plt.title('Production Cost Changes After Adoption')
plt.xticks(ticks=range(len(categories)), labels=[categories[i] for i in sorted(categories.keys())], rotation=45)
plt.tight_layout()
plt.show()

# ==================== INCOME ANALYSIS ====================
income_data = [
    ("H", 6000), ("P", 3500), ("P", 4000), None, None, None, None,
    ("H", 2000), ("H", 6000), ("H", 6000), ("H", 7000), ("H", 5000), 
    ("H", 10000), ("H", 5000), ("P", 500), ("H", 5000), ("P", 5000), 
    ("P", "15% of P"), ("H", 7000), ("P", 5000), ("P", "25% of P"),
    ("H", 4500), ("H", 4500), ("H", 4500), ("H", 5500), ("P", 3500),
    None, None, None, ("P", 1000), ("P", 1500), None, None, None, None,
    ("H", 2000), None, None, None, ("H", 4000), ("P", 2000),
    None, None, None, None, None, None, None, ("H", 2000),
    ("H", 2000), ("H", 3000), ("H", 5000), ("H", 6000), ("H", 1500),
    ("H", 2000), ("H", 3000), ("H", 2000), ("H", 5000), ("H", 2500),
    ("H", 2000), ("H", 3000), ("H", 2500), ("H", 3000), ("H", 4000),
    ("P", 2000), ("H", 2000), ("H", 2500), ("H", 5000), ("H", 5000),
    ("H", 6000), ("H", 6000), ("H", 4000), ("P", 3000), ("H", 2000),
    ("H", 5000), ("P", 4000), ("H", 2500), ("P", 1000), ("P", 1100),
    ("P", 1200)
]

h_values = [item[1] for item in income_data if item is not None and item[0] == "H" and isinstance(item[1], int)]
p_values = [item[1] for item in income_data if item is not None and item[0] == "P" and isinstance(item[1], int)]

print("\nSorted H Incomes:", sorted(h_values))
print("\nSorted P Incomes:", sorted(p_values))

# ==================== PROFIT MARGIN ANALYSIS ==================== 
profit_data = [
    20, "15%-25%", "N/A", "N/A", "N/A", "₹ 300.00", "N/A", "N/A", "N/A", 2000,
    "N/A", "N/A", "N/A", "N/A", "50%", "25%", 2000, 2000, 2000, 2000,
    "N/A", "N/A", "N/A", 7500, 250, 400, "N/A", "5%", 2500, "N/A",
    2000, ">400", "10%", 250, 550, 550, ">400", 2000, 2000, 1500,
    2500, 3000, 2000, "N/A", "N/A", 200, 4000, 2500, 400, "N/A",
    "N/A", 3000, "N/A", 2000, "N/A", "N/A", 4000, 2500, 2500, 2000,
    4000, "N/A", 2000, 5000, 2200, 3000
]

# Process data
numeric_values = []
percentage_values = []

for item in profit_data:
    if isinstance(item, int):
        numeric_values.append(item)
    elif isinstance(item, str):
        if item.endswith('%'):
            percentage_values.append(float(item.replace('%', '')))
        elif item.replace('.', '').isdigit():
            numeric_values.append(float(item))
        elif item.startswith('₹'):
            numeric_values.append(float(item.replace('₹', '').strip()))
        elif item.startswith('>'):
            numeric_values.append(float(item.replace('>', '')))

# Calculate averages
avg_numeric = sum(numeric_values) / len(numeric_values) if numeric_values else 0
avg_percentage = sum(percentage_values) / len(percentage_values) if percentage_values else 0

# Results
print(f"Average numeric profit: ₹{avg_numeric:,.2f}")
print(f"Average percentage profit: {avg_percentage:.1f}%")
print(f"\nTotal valid numeric entries: {len(numeric_values)}")
print(f"Total valid percentage entries: {len(percentage_values)}")
print(f"Total N/A entries: {profit_data.count('N/A')}")

# Data distribution
print("\nNumeric Profit Distribution:")
print(f"Minimum: ₹{min(numeric_values)}")
print(f"Maximum: ₹{max(numeric_values)}")
print(f"Median: ₹{sorted(numeric_values)[len(numeric_values)//2]}")

print("\nPercentage Profit Distribution:")
print(f"Minimum: {min(percentage_values)}%")
print(f"Maximum: {max(percentage_values)}%")
print(f"Median: {sorted(percentage_values)[len(percentage_values)//2]}%")

